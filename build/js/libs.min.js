function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(x,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,r=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,c=a.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=x.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||C).createElement("script");if(o.text=e,t)for(i in u)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var d="3.5.1",E=function(e,t){return new E.fn.init(e,t)};function h(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!b(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:d,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||b(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,a[t]=E.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},E.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=i(e))||"function"==typeof(n=y.call(t,"constructor")&&t.constructor)&&a.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(h(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(h(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:r.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!=a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(h(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return g(a)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function r(){T()}var e,f,w,o,a,p,h,m,k,l,c,T,x,s,C,g,u,y,v,E="sizzle"+ +new Date,b=n.document,S=0,i=0,A=le(),N=le(),P=le(),L=le(),j=function(e,t){return e===t&&(c=!0),0},M={}.hasOwnProperty,t=[],D=t.pop,O=t.push,I=t.push,q=t.slice,H=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",B="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",W=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",V=new RegExp(R+"+","g"),z=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),U=new RegExp("^"+R+"*,"+R+"*"),$=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),K=new RegExp(R+"|>"),X=new RegExp(W),Y=new RegExp("^"+F+"$"),Q={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{I.apply(t=q.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){I={apply:t.length?function(e,t){O.apply(e,q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(t,e,n,i){var r,o,a,s,l,c,u,d=e&&e.ownerDocument,h=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return n;if(!i&&(T(e),e=e||x,C)){if(11!==h&&(l=te.exec(t)))if(r=l[1]){if(9===h){if(!(a=e.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(d&&(a=d.getElementById(r))&&v(e,a)&&a.id===r)return n.push(a),n}else{if(l[2])return I.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return I.apply(n,e.getElementsByClassName(r)),n}if(f.qsa&&!L[t+" "]&&(!g||!g.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===h&&(K.test(t)||$.test(t))){for((d=ne.test(t)&&ye(e.parentNode)||e)===e&&f.scope||((s=e.getAttribute("id"))?s=s.replace(re,oe):e.setAttribute("id",s=E)),o=(c=p(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+be(c[o]);u=c.join(",")}try{return I.apply(n,d.querySelectorAll(u)),n}catch(e){L(t,!0)}finally{s===E&&e.removeAttribute("id")}}}return m(t.replace(z,"$1"),e,n,i)}function le(){var i=[];return function e(t,n){return i.push(t+" ")>w.cacheLength&&delete e[i.shift()],e[t+" "]=n}}function ce(e){return e[E]=!0,e}function ue(e){var t=x.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function pe(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(a){return ce(function(o){return o=+o,ce(function(e,t){for(var n,i=a([],e.length,o),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:b;return i!=x&&9===i.nodeType&&i.documentElement&&(s=(x=i).documentElement,C=!a(x),b!=x&&(n=x.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",r,!1):n.attachEvent&&n.attachEvent("onunload",r)),f.scope=ue(function(e){return s.appendChild(e).appendChild(x.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ue(function(e){return e.appendChild(x.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(x.getElementsByClassName),f.getById=ue(function(e){return s.appendChild(e).id=E,!x.getElementsByName||!x.getElementsByName(E).length}),f.getById?(w.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var n=e.replace(ie,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},u=[],g=[],(f.qsa=ee.test(x.querySelectorAll))&&(ue(function(e){var t;s.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+E+"-]").length||g.push("~="),(t=x.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=x.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=ee.test(y=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ue(function(e){f.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),u.push("!=",W)}),g=g.length&&new RegExp(g.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(s.compareDocumentPosition),v=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==x||e.ownerDocument==b&&v(b,e)?-1:t==x||t.ownerDocument==b&&v(b,t)?1:l?H(l,e)-H(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==x?-1:t==x?1:r?-1:o?1:l?H(l,e)-H(l,t):0;if(r===o)return he(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?he(a[i],s[i]):a[i]==b?-1:s[i]==b?1:0}),x},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(T(e),f.matchesSelector&&C&&!L[t+" "]&&(!u||!u.test(t))&&(!g||!g.test(t)))try{var n=y.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){L(t,!0)}return 0<se(t,x,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=x&&T(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=x&&T(e);var n=w.attrHandle[t.toLowerCase()],i=n&&M.call(w.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==i?i:f.attributes||!C?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],i=0,r=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(j),c){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},o=se.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(w=se.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=p(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(e){var t=se.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===r:"!="===i?t!==r:"^="===i?r&&0===t.indexOf(r):"*="===i?r&&-1<t.indexOf(r):"$="===i?r&&t.slice(-r.length)===r:"~="===i?-1<(" "+t.replace(V," ")+" ").indexOf(r):"|="===i&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(p,e,t,m,g){var y="nth"!==p.slice(0,3),v="last"!==p.slice(-4),b="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,r,o,a,s,l,c=y!=v?"nextSibling":"previousSibling",u=e.parentNode,d=b&&e.nodeName.toLowerCase(),h=!n&&!b,f=!1;if(u){if(y){for(;c;){for(a=e;a=a[c];)if(b?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=c="only"===p&&!l&&"nextSibling"}return!0}if(l=[v?u.firstChild:u.lastChild],v&&h){for(f=(s=(i=(r=(o=(a=u)[E]||(a[E]={}))[a.uniqueID]||(o[a.uniqueID]={}))[p]||[])[0]===S&&i[1])&&i[2],a=s&&u.childNodes[s];a=++s&&a&&a[c]||(f=s=0)||l.pop();)if(1===a.nodeType&&++f&&a===e){r[p]=[S,s,f];break}}else if(h&&(f=s=(i=(r=(o=(a=e)[E]||(a[E]={}))[a.uniqueID]||(o[a.uniqueID]={}))[p]||[])[0]===S&&i[1]),!1===f)for(;(a=++s&&a&&a[c]||(f=s=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++f||(h&&((r=(o=a[E]||(a[E]={}))[a.uniqueID]||(o[a.uniqueID]={}))[p]=[S,f]),a!==e)););return(f-=g)===m||f%m==0&&0<=f/m}}},PSEUDO:function(e,o){var t,a=w.pseudos[e]||w.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[E]?a(o):1<a.length?(t=[e,e,"",o],w.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=a(e,o),r=i.length;r--;)e[n=H(e,i[r])]=!(t[n]=i[r])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ce(function(e){var i=[],r=[],s=h(e.replace(z,"$1"));return s[E]?ce(function(e,t,n,i){for(var r,o=s(e,null,i,[]),a=e.length;a--;)(r=o[a])&&(e[a]=!(t[a]=r))}):function(e,t,n){return i[0]=e,s(i,null,n,r),i[0]=null,!r.pop()}}),has:ce(function(t){return function(e){return 0<se(t,e).length}}),contains:ce(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:ce(function(n){return Y.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===x.activeElement&&(!x.hasFocus||x.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:ge(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=pe(e);function ve(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function we(s,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,h=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var i,r,o,a=[S,h];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(r=(o=e[E]||(e[E]={}))[e.uniqueID]||(o[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=r[u])&&i[0]===S&&i[1]===h)return a[2]=i[2];if((r[u]=a)[2]=s(e,t,n))return!0}return!1}}function ke(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function Te(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function xe(f,p,m,g,y,e){return g&&!g[E]&&(g=xe(g)),y&&!y[E]&&(y=xe(y,e)),ce(function(e,t,n,i){var r,o,a,s=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(p||"*",n.nodeType?[n]:n,[]),d=!f||!e&&p?u:Te(u,s,f,n,i),h=m?y||(e?f:c||g)?[]:t:d;if(m&&m(d,h,n,i),g)for(r=Te(h,l),g(r,[],n,i),o=r.length;o--;)(a=r[o])&&(h[l[o]]=!(d[l[o]]=a));if(e){if(y||f){if(y){for(r=[],o=h.length;o--;)(a=h[o])&&r.push(d[o]=a);y(null,h=[],r,i)}for(o=h.length;o--;)(a=h[o])&&-1<(r=y?H(e,a):s[o])&&(e[r]=!(t[r]=a))}}else h=Te(h===t?h.splice(c,h.length):h),y?y(null,t,h,i):I.apply(t,h)})}function Ce(e){for(var r,t,n,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=we(function(e){return e===r},a,!0),c=we(function(e){return-1<H(r,e)},a,!0),u=[function(e,t,n){var i=!o&&(n||t!==k)||((r=t).nodeType?l:c)(e,t,n);return r=null,i}];s<i;s++)if(t=w.relative[e[s].type])u=[we(ke(u),t)];else{if((t=w.filter[e[s].type].apply(null,e[s].matches))[E]){for(n=++s;n<i&&!w.relative[e[n].type];n++);return xe(1<s&&ke(u),1<s&&be(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(z,"$1"),t,s<n&&Ce(e.slice(s,n)),n<i&&Ce(e=e.slice(n)),n<i&&be(e))}u.push(t)}return ke(u)}function Ee(g,y){function e(e,t,n,i,r){var o,a,s,l=0,c="0",u=e&&[],d=[],h=k,f=e||b&&w.find.TAG("*",r),p=S+=null==h?1:Math.random()||.1,m=f.length;for(r&&(k=t==x||t||r);c!==m&&null!=(o=f[c]);c++){if(b&&o){for(a=0,t||o.ownerDocument==x||(T(o),n=!C);s=g[a++];)if(s(o,t||x,n)){i.push(o);break}r&&(S=p)}v&&((o=!s&&o)&&l--,e&&u.push(o))}if(l+=c,v&&c!==l){for(a=0;s=y[a++];)s(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=D.call(i));d=Te(d)}I.apply(i,d),r&&!e&&0<d.length&&1<l+y.length&&se.uniqueSort(i)}return r&&(S=p,k=h),u}var v=0<y.length,b=0<g.length;return v?ce(e):e}return ve.prototype=w.filters=w.pseudos,w.setFilters=new ve,p=se.tokenize=function(e,t){var n,i,r,o,a,s,l,c=N[e+" "];if(c)return t?0:c.slice(0);for(a=e,s=[],l=w.preFilter;a;){for(o in n&&!(i=U.exec(a))||(i&&(a=a.slice(i[0].length)||a),s.push(r=[])),n=!1,(i=$.exec(a))&&(n=i.shift(),r.push({value:n,type:i[0].replace(z," ")}),a=a.slice(n.length)),w.filter)!(i=Q[o].exec(a))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):N(e,s).slice(0)},h=se.compile=function(e,t){var n,i=[],r=[],o=P[e+" "];if(!o){for(n=(t=t||p(e)).length;n--;)(o=Ce(t[n]))[E]?i.push(o):r.push(o);(o=P(e,Ee(r,i))).selector=e}return o},m=se.select=function(e,t,n,i){var r,o,a,s,l,c="function"==typeof e&&e,u=!i&&p(e=c.selector||e);if(n=n||[],1===u.length){if(2<(o=u[0]=u[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&C&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ie,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=Q.needsContext.test(e)?0:o.length;r--&&(a=o[r],!w.relative[s=a.type]);)if((l=w.find[s])&&(i=l(a.matches[0].replace(ie,d),ne.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&be(o)))return I.apply(n,i),n;break}}return(c||h(e,u))(i,t,!C,n,!t||ne.test(e)&&ye(t.parentNode)||t),n},f.sortStable=E.split("").sort(j).join("")===E,f.detectDuplicates=!!c,T(),f.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(x.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(_,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),se}(x);E.find=f,E.expr=f.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=f.uniqueSort,E.text=f.getText,E.isXMLDoc=f.isXML,E.contains=f.contains,E.escapeSelector=f.escape;function p(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i}function T(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var S=E.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,n,i){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?E.grep(e,function(e){return e===n!==i}):"string"!=typeof n?E.grep(e,function(e){return-1<r.call(n,e)!==i}):E.filter(n,e,i)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return 1<i?E.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&S.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),N.test(i[1])&&E.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=C.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=E.fn,L=E(C);var M=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&E(e);if(!S.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?r.call(E(e),this[0]):r.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return p(e,"parentNode")},parentsUntil:function(e,t,n){return p(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return p(e,"nextSibling")},prevAll:function(e){return p(e,"previousSibling")},nextUntil:function(e,t,n){return p(e,"nextSibling",n)},prevUntil:function(e,t,n){return p(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(i,r){E.fn[i]=function(e,t){var n=E.map(this,r,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=E.filter(t,n)),1<this.length&&(D[i]||E.uniqueSort(n),M.test(i)&&n.reverse()),this.pushStack(n)}});var I=/[^\x20\t\r\n\f]+/g;function q(e){return e}function H(e){throw e}function _(e,t,n,i){var r;try{e&&b(r=e.promise)?r.call(e).done(t).fail(n):e&&b(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},E.each(e.match(I)||[],function(e,t){n[t]=!0}),n):E.extend({},i);function r(){for(s=s||i.once,a=o=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),o=!1,s&&(l=t?[]:"")}var o,t,a,s,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!o&&(u=l.length-1,c.push(t)),function n(e){E.each(e,function(e,t){b(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==k(t)&&n(t)})}(arguments),t&&!o&&r()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;-1<(n=E.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=c=[],t||o||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),o||r()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},E.extend({Deferred:function(e){var o=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",a={state:function(){return r},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var r=arguments;return E.Deferred(function(i){E.each(o,function(e,t){var n=b(r[t[4]])&&r[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function c(r,o,a,s){return function(){function e(){var e,t;if(!(r<l)){if((e=a.apply(n,i))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?s?t.call(e,c(l,o,q,s),c(l,o,H,s)):(l++,t.call(e,c(l,o,q,s),c(l,o,H,s),c(l,o,q,o.notifyWith))):(a!==q&&(n=void 0,i=[e]),(s||o.resolveWith)(n,i))}}var n=this,i=arguments,t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(a!==H&&(n=void 0,i=[e]),o.rejectWith(n,i))}};r?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),x.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(c(0,e,b(i)?i:q,e.notifyWith)),o[1][3].add(c(0,e,b(t)?t:q)),o[2][3].add(c(0,e,b(n)?n:H))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],i=t[5];a[t[1]]=n.add,i&&n.add(function(){r=i},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){r[t]=this,o[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(r,o)}}var n=arguments.length,i=n,r=Array(i),o=s.call(arguments),a=E.Deferred();if(n<=1&&(_(e,a.done(t(i)).resolve,a.reject,!n),"pending"===a.state()||b(o[i]&&o[i].then)))return a.then();for(;i--;)_(o[i],t(i),a.reject);return a.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){x.console&&x.console.warn&&e&&R.test(e.name)&&x.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){x.setTimeout(function(){throw e})};var F=E.Deferred();function B(){C.removeEventListener("DOMContentLoaded",B),x.removeEventListener("load",B),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||F.resolveWith(C,[E])}}),E.ready.then=F.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?x.setTimeout(E.ready):(C.addEventListener("DOMContentLoaded",B),x.addEventListener("load",B));var W=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===k(n))for(s in r=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,b(i)||(a=!0),c&&(t=a?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(E(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},V=/^-ms-/,z=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function $(e){return e.replace(V,"ms-").replace(z,U)}function K(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function X(){this.expando=E.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[$(t)]=n;else for(i in t)r[$(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map($):(t=$(t))in i?[t]:t.match(I)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!E.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new X,Q=new X,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:G.test(r)?JSON.parse(r):r)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Q.hasData(e)||Y.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,i,r,o=this[0],a=o&&o.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){Q.set(this,n)}):W(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Q.get(o,n))||void 0!==(t=Z(o,n))?t:void 0;this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=Q.get(o),1===o.nodeType&&!Y.get(o,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(i=a[t].name).indexOf("data-")&&(i=$(i.slice(5)),Z(o,i,r[i]));Y.set(o,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Y.get(e,t),n&&(!i||Array.isArray(n)?i=Y.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),o=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){E.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||o.resolveWith(a,[a])}var i,r=1,o=E.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=Y.get(a[s],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=C.documentElement,re=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};ie.getRootNode&&(re=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===E.css(e,"display")};function se(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=s(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&te.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)E.style(e,t,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var le={};function ce(e,t){for(var n,i,r,o,a,s,l,c=[],u=0,d=e.length;u<d;u++)(i=e[u]).style&&(n=i.style.display,t?("none"===n&&(c[u]=Y.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&ae(i)&&(c[u]=(l=a=o=void 0,a=(r=i).ownerDocument,s=r.nodeName,(l=le[s])||(o=a.body.appendChild(a.createElement(s)),l=E.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),le[s]=l)))):"none"!==n&&(c[u]="none",Y.set(i,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}E.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var ue,de,he=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i;ue=C.createDocumentFragment().appendChild(C.createElement("div")),(de=C.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),v.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",v.option=!!ue.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?E.merge([e],n):n}function ye(e,t){for(var n=0,i=e.length;n<i;n++)Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,v.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var ve=/<|&#?\w+;/;function be(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),h=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===k(o))E.merge(h,o.nodeType?[o]:o);else if(ve.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(fe.exec(o)||["",""])[1].toLowerCase(),l=me[s]||me._default,a.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;E.merge(h,a.childNodes),(a=d.firstChild).textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",f=0;o=h[f++];)if(i&&-1<E.inArray(o,i))r&&r.push(o);else if(c=re(o),a=ge(d.appendChild(o),"script"),c&&ye(a),n)for(u=0;o=a[u++];)pe.test(o.type||"")&&n.push(o);return d}var we=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function xe(){return!0}function Ce(){return!1}function Ee(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function Se(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Se(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ce;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,r,i,n)})}function Ae(e,r,o){o?(Y.set(e,r,!1),E.event.add(e,r,{namespace:!1,handler:function(e){var t,n,i=Y.get(this,r);if(1&e.isTrigger&&this[r]){if(i.length)(E.event.special[r]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),Y.set(this,r,i),t=o(this,r),this[r](),i!==(n=Y.get(this,r))||t?Y.set(this,r,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&(Y.set(this,r,{value:E.event.trigger(E.extend(i[0],E.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,r)&&E.event.add(e,r,xe)}E.event={global:{},add:function(t,e,n,i,r){var o,a,s,l,c,u,d,h,f,p,m,g=Y.get(t);if(K(t))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(ie,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(I)||[""]).length;c--;)f=m=(s=Te.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),f&&(d=E.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,d=E.event.special[f]||{},u=E.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=l[f])||((h=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,p,a)||t.addEventListener&&t.addEventListener(f,a)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,u):h.push(u),E.event.global[f]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,h,f,p,m,g=Y.hasData(e)&&Y.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(I)||[""]).length;c--;)if(f=m=(s=Te.exec(t[c])||[])[1],p=(s[2]||"").split(".").sort(),f){for(d=E.event.special[f]||{},h=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)u=h[o],!r&&m!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(h.splice(o,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(e,u));a&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,p,g.handle)||E.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)E.event.remove(e,f+t[c],n,i,!0);E.isEmptyObject(l)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=E.event.fix(e),c=(Y.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,c),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?-1<E(r,this).index(c):E.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",xe),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&A(t,"input")&&Y.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Ee),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){E.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),E.fn.extend({on:function(e,t,n,i){return Se(this,e,t,n,i)},one:function(e,t,n,i){return Se(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){E.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this}});var Ne=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(r in Y.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)E.event.add(t,r,s[r][n]);Q.hasData(e)&&(o=Q.access(e),a=E.extend({},o),Q.set(t,a))}}function Ie(n,i,r,o){i=g(i);var e,t,a,s,l,c,u=0,d=n.length,h=d-1,f=i[0],p=b(f);if(p||1<d&&"string"==typeof f&&!v.checkClone&&Pe.test(f))return n.each(function(e){var t=n.eq(e);p&&(i[0]=f.call(this,e,t.html())),Ie(t,i,r,o)});if(d&&(t=(e=be(i,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,"script"),Me)).length;u<d;u++)l=e,u!==h&&(l=E.clone(l,!0,!0),s&&E.merge(a,ge(l,"script"))),r.call(n[u],l,u);if(s)for(c=a[a.length-1].ownerDocument,E.map(a,De),u=0;u<s;u++)l=a[u],pe.test(l.type||"")&&!Y.access(l,"globalEval")&&E.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(Le,""),l,c))}return n}function qe(e,t,n){for(var i,r=t?E.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(ge(i)),i.parentNode&&(n&&re(i)&&ye(ge(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s,l,c,u=e.cloneNode(!0),d=re(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(u),i=0,r=(o=ge(e)).length;i<r;i++)s=o[i],l=a[i],"input"===(c=l.nodeName.toLowerCase())&&he.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(u),i=0,r=o.length;i<r;i++)Oe(o[i],a[i]);else Oe(e,u);return 0<(a=ge(u,"script")).length&&ye(a,!d&&ge(e,"script")),u},cleanData:function(e){for(var t,n,i,r=E.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[Y.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[Y.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),E.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return W(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){E.fn[e]=function(e){for(var t,n=[],i=E(e),r=i.length-1,o=0;o<=r;o++)t=o===r?this:this.clone(!0),E(i[o])[a](t),l.apply(n,t.get());return this.pushStack(n)}});function He(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i}var _e,Re,Fe,Be,We,Ve,ze,Ue,$e=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=x),t.getComputedStyle(e)},Xe=new RegExp(ne.join("|"),"i");function Ye(){if(Ue){ze.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ue.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(ze).appendChild(Ue);var e=x.getComputedStyle(Ue);_e="1%"!==e.top,Ve=12===Qe(e.marginLeft),Ue.style.right="60%",Be=36===Qe(e.right),Re=36===Qe(e.width),Ue.style.position="absolute",Fe=12===Qe(Ue.offsetWidth/3),ie.removeChild(ze),Ue=null}}function Qe(e){return Math.round(parseFloat(e))}function Ge(e,t,n){var i,r,o,a,s=e.style;return(n=n||Ke(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||re(e)||(a=E.style(e,t)),!v.pixelBoxStyles()&&$e.test(a)&&Xe.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}ze=C.createElement("div"),(Ue=C.createElement("div")).style&&(Ue.style.backgroundClip="content-box",Ue.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Ue.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return Ye(),Re},pixelBoxStyles:function(){return Ye(),Be},pixelPosition:function(){return Ye(),_e},reliableMarginLeft:function(){return Ye(),Ve},scrollboxSize:function(){return Ye(),Fe},reliableTrDimensions:function(){var e,t,n,i;return null==We&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=x.getComputedStyle(t),We=3<parseInt(i.height),ie.removeChild(e)),We}}));var Ze=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function nt(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,rt=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=E.css(e,n+ne[a],!0,r)),i?("content"===n&&(l-=E.css(e,"padding"+ne[a],!0,r)),"margin"!==n&&(l-=E.css(e,"border"+ne[a]+"Width",!0,r))):(l+=E.css(e,"padding"+ne[a],!0,r),"padding"!==n?l+=E.css(e,"border"+ne[a]+"Width",!0,r):s+=E.css(e,"border"+ne[a]+"Width",!0,r));return!i&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function ct(e,t,n){var i=Ke(e),r=(!v.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),o=r,a=Ge(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&A(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===E.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function ut(e,t,n,i,r){return new ut.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=$(t),l=rt.test(t),c=e.style;if(l||(t=nt(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=te.exec(n))&&r[1]&&(n=se(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(E.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=$(t);return rt.test(t)||(t=nt(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Ge(e,t,i)),"normal"===r&&t in at&&(r=at[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):He(e,ot,function(){return ct(e,l,n)})},set:function(e,t,n){var i,r=Ke(e),o=!v.scrollboxSize()&&"absolute"===r.position,a=(o||n)&&"border-box"===E.css(e,"boxSizing",!1,r),s=n?lt(e,l,n,a,r):0;return a&&o&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(r[l])-lt(e,l,"border",!1,r)-.5)),s&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),st(0,t,s)}}}),E.cssHooks.marginLeft=Je(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(r,o){E.cssHooks[r+o]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+ne[t]+o]=i[t]||i[t-2]||i[0];return n}},"margin"!==r&&(E.cssHooks[r+o].set=st)}),E.fn.extend({css:function(e,t){return W(this,function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=Ke(e),r=t.length;a<r;a++)o[t[a]]=E.css(e,t[a],!1,i);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),((E.Tween=ut).prototype={constructor:ut,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}}).init.prototype=ut.prototype,(ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ut.prototype.init,E.fx.step={};var dt,ht,ft,pt,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function yt(){ht&&(!1===C.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(yt):x.setTimeout(yt,E.fx.interval),E.fx.tick())}function vt(){return x.setTimeout(function(){dt=void 0}),dt=Date.now()}function bt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=ne[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function wt(e,t,n){for(var i,r=(kt.tweeners[t]||[]).concat(kt.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function kt(o,e,t){var n,a,i=0,r=kt.prefilters.length,s=E.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=dt||vt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,r=c.tweens.length;i<r;i++)c.tweens[i].run(n);return s.notifyWith(o,[c,n,t]),n<1&&r?t:(r||s.notifyWith(o,[c,1,0]),s.resolveWith(o,[c]),!1)},c=s.promise({elem:o,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||vt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=E.Tween(o,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)c.tweens[t].run(1);return e?(s.notifyWith(o,[c,1,0]),s.resolveWith(o,[c,e])):s.rejectWith(o,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=$(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=E.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);i<r;i++)if(n=kt.prefilters[i].call(c,o,u,c.opts))return b(n.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return E.map(u,wt,c),b(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(kt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=b(e)?(t=e,["*"]):e.match(I)).length;i<r;i++)n=e[i],kt.tweeners[n]=kt.tweeners[n]||[],kt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,h=this,f={},p=e.style,m=e.nodeType&&ae(e),g=Y.get(e,"fxshow");for(i in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(r=t[i],mt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}f[i]=g&&g[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=g&&g.display)&&(c=Y.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=E.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(h.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=Y.access(e,"fxshow",{display:c}),o&&(g.hidden=!m),m&&ce([e],!0),h.done(function(){for(i in m||ce([e]),Y.remove(e,"fxshow"),f)E.style(e,i,f[i])})),l=wt(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?kt.prefilters.unshift(e):kt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=kt(this,E.extend({},t),a);(o||Y.get(this,"finish"))&&e.stop(!0)}var o=E.isEmptyObject(t),a=E.speed(e,n,i);return r.finish=r,o||!1===a.queue?this.each(r):this.queue(a.queue,r)},stop:function(r,e,o){function a(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=E.timers,i=Y.get(this);if(t)i[t]&&i[t].stop&&a(i[t]);else for(t in i)i[t]&&i[t].stop&&gt.test(t)&&a(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||E.dequeue(this,r)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Y.get(this),n=t[a+"queue"],i=t[a+"queueHooks"],r=E.timers,o=n?n.length:0;for(t.finish=!0,E.queue(this,a,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===a&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,i){var r=E.fn[i];E.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(bt(i,!0),e,t,n)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){E.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),dt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ht||(ht=!0,yt())},E.fx.stop=function(){ht=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(i,e){return i=E.fx&&E.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=x.setTimeout(e,i);t.stop=function(){x.clearTimeout(n)}})},ft=C.createElement("input"),pt=C.createElement("select").appendChild(C.createElement("option")),ft.type="checkbox",v.checkOn=""!==ft.value,v.optSelected=pt.selected,(ft=C.createElement("input")).value="t",ft.type="radio",v.radioValue="t"===ft.value;var Tt,xt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return W(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(I);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),Tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var a=xt[t]||E.find.attr;xt[t]=function(e,t,n){var i,r,o=t.toLowerCase();return n||(r=xt[o],xt[o]=i,i=null!=a(e,t,n)?o:null,xt[o]=r),i}});var Ct=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function St(e){return(e.match(I)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Nt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}E.fn.extend({prop:function(e,t){return W(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,i,r,o,a,s,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,At(this)))});if((e=Nt(t)).length)for(;n=this[l++];)if(r=At(n),i=1===n.nodeType&&" "+St(r)+" "){for(a=0;o=e[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=St(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,r,o,a,s,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Nt(t)).length)for(;n=this[l++];)if(r=At(n),i=1===n.nodeType&&" "+St(r)+" "){for(a=0;o=e[a++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(s=St(i))&&n.setAttribute("class",s)}return this},toggleClass:function(r,t){var o=typeof r,a="string"==o||Array.isArray(r);return"boolean"==typeof t&&a?t?this.addClass(r):this.removeClass(r):b(r)?this.each(function(e){E(this).toggleClass(r.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,i;if(a)for(t=0,n=E(this),i=Nt(r);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==r&&"boolean"!=o||((e=At(this))&&Y.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===r?"":Y.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+St(At(n))+" ").indexOf(t))return!0;return!1}});var Pt=/\r/g;E.fn.extend({val:function(n){var i,e,r,t=this[0];return arguments.length?(r=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?n.call(this,e,E(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(i=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:St(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=E.makeArray(t),a=r.length;a--;)((i=r[a]).selected=-1<E.inArray(E.valHooks.option.get(i),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in x;function Lt(e){e.stopPropagation()}var jt=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,n,i){var r,o,a,s,l,c,u,d,h=[n||C],f=y.call(e,"type")?e.type:e,p=y.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!jt.test(f+E.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[E.expando]?e:new E.Event(f,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),u=E.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!m(n)){for(s=u.delegateType||f,jt.test(s+f)||(o=o.parentNode);o;o=o.parentNode)h.push(o),a=o;a===(n.ownerDocument||C)&&h.push(a.defaultView||a.parentWindow||x)}for(r=0;(o=h[r++])&&!e.isPropagationStopped();)d=o,e.type=1<r?s:u.bindType||f,(c=(Y.get(o,"events")||Object.create(null))[e.type]&&Y.get(o,"handle"))&&c.apply(o,t),(c=l&&o[l])&&c.apply&&K(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=f,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),t)||!K(n)||l&&b(n[f])&&!m(n)&&((a=n[l])&&(n[l]=null),E.event.triggered=f,e.isPropagationStopped()&&d.addEventListener(f,Lt),n[f](),e.isPropagationStopped()&&d.removeEventListener(f,Lt),E.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){E.event.simulate(i,e.target,E.event.fix(e))}E.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,i);t||e.addEventListener(n,r,!0),Y.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,i)-1;t?Y.access(e,i,t):(e.removeEventListener(n,r,!0),Y.remove(e,i))}}});var Mt=x.location,Dt={guid:Date.now()},Ot=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new x.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var It=/\[\]$/,qt=/\r?\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,_t=/^(?:input|select|textarea|keygen)/i;function Rt(n,e,i,r){var t;if(Array.isArray(e))E.each(e,function(e,t){i||It.test(n)?r(n,t):Rt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,r)});else if(i||"object"!==k(e))r(n,e);else for(t in e)Rt(n+"["+t+"]",e[t],i,r)}E.param=function(e,t){function n(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,r=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){n(this.name,this.value)});else for(i in e)Rt(i,e[i],t,n);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&_t.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(qt,"\r\n")}}):{name:t.name,value:n.replace(qt,"\r\n")}}).get()}});var Ft=/%20/g,Bt=/#.*$/,Wt=/([?&])_=[^&]*/,Vt=/^(.*?):[ \t]*([^\r\n]*)$/gm,zt=/^(?:GET|HEAD)$/,Ut=/^\/\//,$t={},Kt={},Xt="*/".concat("*"),Yt=C.createElement("a");function Qt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(I)||[];if(b(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Gt(t,r,o,a){var s={},l=t===Kt;function c(e){var i;return s[e]=!0,E.each(t[e]||[],function(e,t){var n=t(r,o,a);return"string"!=typeof n||l||s[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),c(n),!1)}),i}return c(r.dataTypes[0])||!s["*"]&&c("*")}function Jt(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&E.extend(!0,e,i),e}Yt.href=Mt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Xt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,E.ajaxSettings),t):Jt(E.ajaxSettings,e)},ajaxPrefilter:Qt($t),ajaxTransport:Qt(Kt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,h,n,f,i,p,m,r,o,g=E.ajaxSetup({},t),y=g.context||g,v=g.context&&(y.nodeType||y.jquery)?E(y):E.event,b=E.Deferred(),w=E.Callbacks("once memory"),k=g.statusCode||{},a={},s={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(p){if(!n)for(n={};t=Vt.exec(h);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?h:null},setRequestHeader:function(e,t){return null==p&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==p&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(p)T.always(e[T.status]);else for(t in e)k[t]=[k[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(b.promise(T),g.url=((e||g.url||Mt.href)+"").replace(Ut,Mt.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(I)||[""],null==g.crossDomain){i=C.createElement("a");try{i.href=g.url,i.href=i.href,g.crossDomain=Yt.protocol+"//"+Yt.host!=i.protocol+"//"+i.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=E.param(g.data,g.traditional)),Gt($t,g,t,T),p)return T;for(r in(m=E.event&&g.global)&&0==E.active++&&E.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!zt.test(g.type),d=g.url.replace(Bt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Ft,"+")):(o=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=(Ot.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(Wt,"$1"),o=(Ot.test(d)?"&":"?")+"_="+Dt.guid+++o),g.url=d+o),g.ifModified&&(E.lastModified[d]&&T.setRequestHeader("If-Modified-Since",E.lastModified[d]),E.etag[d]&&T.setRequestHeader("If-None-Match",E.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Xt+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(r,g.headers[r]);if(g.beforeSend&&(!1===g.beforeSend.call(y,T,g)||p))return T.abort();if(l="abort",w.add(g.complete),T.done(g.success),T.fail(g.error),u=Gt(Kt,g,t,T)){if(T.readyState=1,m&&v.trigger("ajaxSend",[T,g]),p)return T;g.async&&0<g.timeout&&(f=x.setTimeout(function(){T.abort("timeout")},g.timeout));try{p=!1,u.send(a,c)}catch(e){if(p)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,i){var r,o,a,s,l,c=t;p||(p=!0,f&&x.clearTimeout(f),u=void 0,h=i||"",T.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a=a||r}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(g,T,n)),!r&&-1<E.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),s=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(g,s,T,r),r?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(E.lastModified[d]=l),(l=T.getResponseHeader("etag"))&&(E.etag[d]=l)),204===e||"HEAD"===g.type?c="nocontent":304===e?c="notmodified":(c=s.state,o=s.data,r=!(a=s.error))):(a=c,!e&&c||(c="error",e<0&&(e=0))),T.status=e,T.statusText=(t||c)+"",r?b.resolveWith(y,[o,c,T]):b.rejectWith(y,[T,c,a]),T.statusCode(k),k=void 0,m&&v.trigger(r?"ajaxSuccess":"ajaxError",[T,g,r?o:a]),w.fireWith(y,[T,c]),m&&(v.trigger("ajaxComplete",[T,g]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,r){E[r]=function(e,t,n,i){return b(t)&&(i=i||n,n=t,t=void 0),E.ajax(E.extend({url:e,type:r,dataType:i,data:t,success:n},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},en=E.ajaxSettings.xhr();v.cors=!!en&&"withCredentials"in en,v.ajax=en=!!en,E.ajaxTransport(function(r){var o,a;if(v.cors||en&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=o(),a=i.onerror=i.ontimeout=o("error"),void 0!==i.onabort?i.onabort=a:i.onreadystatechange=function(){4===i.readyState&&x.setTimeout(function(){o&&a()})},o=o("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(n){var i,r;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=E("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(i[0])},abort:function(){r&&r()}}});var tn,nn=[],rn=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||E.expando+"_"+Dt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,o,a=!1!==e.jsonp&&(rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(rn,"$1"+i):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||E.error(i+" was not called"),o[0]},e.dataTypes[0]="json",r=x[i],x[i]=function(){o=arguments},n.always(function(){void 0===r?E(x).removeProp(i):x[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,nn.push(i)),o&&b(r)&&r(o[0]),o=r=void 0}),"script"}),v.createHTMLDocument=((tn=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(i)):t=C),o=!n&&[],(r=N.exec(e))?[t.createElement(r[1])]:(r=be([e],t,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return-1<s&&(i=St(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<a.length&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=E.css(e,"position"),u=E(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=E.css(e,"top"),l=E.css(e,"left"),r=("absolute"===c||"fixed"===c)&&-1<(o+l).indexOf("auto")?(a=(i=u.position()).top,i.left):(a=parseFloat(o)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),r.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-E.css(i,"marginTop",!0),left:t.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ie})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o="pageYOffset"===r;E.fn[t]=function(e){return W(this,function(e,t,n){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[r]:e[t];i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each(["top","left"],function(e,n){E.cssHooks[n]=Je(v.pixelPosition,function(e,t){if(t)return t=Ge(e,n),$e.test(t)?E(e).position()[n]+"px":t})}),E.each({Height:"height",Width:"width"},function(a,s){E.each({padding:"inner"+a,content:s,"":"outer"+a},function(i,o){E.fn[o]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var i;return m(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+a],i["scroll"+a],e.body["offset"+a],i["offset"+a],i["client"+a])):void 0===n?E.css(e,t,r):E.style(e,t,n,r)},s,n?e:void 0,n)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var on=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=s.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,r},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,E.isFunction=b,E.isWindow=m,E.camelCase=$,E.type=k,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(on,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var an=x.jQuery,sn=x.$;return E.noConflict=function(e){return x.$===E&&(x.$=sn),e&&x.jQuery===E&&(x.jQuery=an),E},void 0===e&&(x.jQuery=x.$=E),E}),"object"==typeof navigator&&function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Plyr",t):(e=e||self).Plyr=t()}(this,function(){"use strict";function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function e(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,i)}return n}function w(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach(function(e){o(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}}(e,t)||n(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||n(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function t(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,i)}return n}function u(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?s(Object(o),!0).forEach(function(e){var t,n,i;t=r,i=o[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))})}return r}var d={addCSS:!0,thumbWidth:15,watch:!0};function h(e){return null!=e?e.constructor:null}function f(e,t){return!!(e&&t&&e instanceof t)}function p(e){return h(e)===String}function m(e){return Array.isArray(e)}function g(e){return f(e,NodeList)}function y(e){return f(e,Element)}function v(e){return f(e,Event)}function b(e){return null==e||(p(e)||m(e)||g(e))&&!e.length||h(e)===Object&&!Object.keys(e).length}var T=p,x=m,C=g;function E(e){return null!=e?e.constructor:null}function S(e,t){return Boolean(e&&t&&e instanceof t)}function A(e){return null==e}function N(e){return E(e)===Object}function P(e){return E(e)===String}function L(e){return E(e)===Function}function j(e){return Array.isArray(e)}function M(e){return S(e,NodeList)}function D(e){return A(e)||(P(e)||j(e)||M(e))&&!e.length||N(e)&&!Object.keys(e).length}function O(e){return E(e)===Boolean}function I(e){return S(e,Event)}function q(e){return S(e,KeyboardEvent)}function H(e){return S(e,TextTrack)||!A(e)&&P(e.kind)}function _(e){if(S(e,window.URL))return!0;if(!P(e))return!1;var t=e;e.startsWith("http://")&&e.startsWith("https://")||(t="http://".concat(e));try{return!D(new URL(t).hostname)}catch(e){return!1}}var R,F,B,W,V,z=(V=[{key:"setup",value:function(n){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=null;if(b(n)||T(n)?e=Array.from(document.querySelectorAll(T(n)?n:'input[type="range"]')):y(n)?e=[n]:C(n)?e=Array.from(n):x(n)&&(e=n.filter(y)),b(e))return null;var i=u({},d,{},t);return T(n)&&i.watch&&new MutationObserver(function(e){Array.from(e).forEach(function(e){Array.from(e.addedNodes).forEach(function(e){var t;y(e)&&function(){return Array.from(document.querySelectorAll(t)).includes(this)}.call(e,t=n)&&new ne(e,i)})})}).observe(document.body,{childList:!0,subtree:!0}),e.map(function(e){return new ne(e,t)})}},{key:"enabled",get:function(){return"ontouchstart"in document.documentElement}}],t((W=ne).prototype,[{key:"init",value:function(){ne.enabled&&(this.config.addCSS&&(this.element.style.userSelect="none",this.element.style.webKitUserSelect="none",this.element.style.touchAction="manipulation"),this.listeners(!0),this.element.rangeTouch=this)}},{key:"destroy",value:function(){ne.enabled&&(this.config.addCSS&&(this.element.style.userSelect="",this.element.style.webKitUserSelect="",this.element.style.touchAction=""),this.listeners(!1),this.element.rangeTouch=null)}},{key:"listeners",value:function(e){var t=this,n=e?"addEventListener":"removeEventListener";["touchstart","touchmove","touchend"].forEach(function(e){t.element[n](e,function(e){return t.set(e)},!1)})}},{key:"get",value:function(e){if(!ne.enabled||!v(e))return null;var t,n=e.target,i=e.changedTouches[0],r=parseFloat(n.getAttribute("min"))||0,o=parseFloat(n.getAttribute("max"))||100,a=parseFloat(n.getAttribute("step"))||1,s=n.getBoundingClientRect(),l=100/s.width*(this.config.thumbWidth/2)/100;return(t=100/s.width*(i.clientX-s.left))<0?t=0:100<t&&(t=100),t<50?t-=(100-2*t)*l:50<t&&(t+=2*(t-50)*l),r+function(e,t){if(t<1){var n=(i="".concat(t).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/))?Math.max(0,(i[1]?i[1].length:0)-(i[2]?+i[2]:0)):0;return parseFloat(e.toFixed(n))}var i;return Math.round(e/t)*t}(t/100*(o-r),a)}},{key:"set",value:function(e){ne.enabled&&v(e)&&!e.target.disabled&&(e.preventDefault(),e.target.value=this.get(e),function(e,t){if(e&&t){var n=new Event(t,{bubbles:!0});e.dispatchEvent(n)}}(e.target,"touchend"===e.type?"change":"input"))}}]),t(W,V),ne),U=A,$=N,K=function(e){return E(e)===Number&&!Number.isNaN(e)},X=P,Y=L,Q=j,G=M,J=function(e){return S(e,Element)},Z=function(e){return S(e,Promise)&&L(e.then)},ee=D,te=(R=document.createElement("span"),F={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},B=Object.keys(F).find(function(e){return void 0!==R.style[e]}),!!X(B)&&F[B]);function ne(e,t){(function(e){if(!(e instanceof ne))throw new TypeError("Cannot call a class as a function")})(this),y(e)?this.element=e:T(e)&&(this.element=document.querySelector(e)),y(this.element)&&b(this.element.rangeTouch)&&(this.config=u({},d,{},t),this.init())}function ie(e,t){setTimeout(function(){try{e.hidden=!0,e.offsetHeight,e.hidden=!1}catch(e){}},t)}var re={isIE:!!document.documentMode,isEdge:window.navigator.userAgent.includes("Edge"),isWebkit:"WebkitAppearance"in document.documentElement.style&&!/Edge/.test(navigator.userAgent),isIPhone:/(iPhone|iPod)/gi.test(navigator.platform),isIos:/(iPad|iPhone|iPod)/gi.test(navigator.platform)};function oe(e,t){return t.split(".").reduce(function(e,t){return e&&e[t]},e)}function ae(){for(var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length,n=new Array(1<e?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(!n.length)return t;var r=n.shift();return $(r)?(Object.keys(r).forEach(function(e){$(r[e])?(Object.keys(t).includes(e)||Object.assign(t,o({},e,{})),ae(t[e],r[e])):Object.assign(t,o({},e,r[e]))}),ae.apply(void 0,[t].concat(n))):t}function se(e,o){var t=e.length?e:[e];Array.from(t).reverse().forEach(function(e,t){var n=0<t?o.cloneNode(!0):o,i=e.parentNode,r=e.nextSibling;n.appendChild(e),r?i.insertBefore(n,r):i.appendChild(n)})}function le(r,e){J(r)&&!ee(e)&&Object.entries(e).filter(function(e){var t=k(e,2)[1];return!U(t)}).forEach(function(e){var t=k(e,2),n=t[0],i=t[1];return r.setAttribute(n,i)})}function ce(e,t,n){var i=document.createElement(e);return $(t)&&le(i,t),X(n)&&(i.innerText=n),i}function ue(e,t,n,i){J(t)&&t.appendChild(ce(e,n,i))}function de(e){G(e)||Q(e)?Array.from(e).forEach(de):J(e)&&J(e.parentNode)&&e.parentNode.removeChild(e)}function he(e){if(J(e))for(var t=e.childNodes.length;0<t;)e.removeChild(e.lastChild),--t}function fe(e,t){return J(t)&&J(t.parentNode)&&J(e)?(t.parentNode.replaceChild(e,t),e):null}function pe(e,t){if(!X(e)||ee(e))return{};var a={},s=ae({},t);return e.split(",").forEach(function(e){var t=e.trim(),n=t.replace(".",""),i=t.replace(/[[\]]/g,"").split("="),r=k(i,1)[0],o=1<i.length?i[1].replace(/["']/g,""):"";switch(t.charAt(0)){case".":X(s.class)?a.class="".concat(s.class," ").concat(n):a.class=n;break;case"#":a.id=t.replace("#","");break;case"[":a[r]=o}}),ae(s,a)}function me(e,t){if(J(e)){var n=t;O(n)||(n=!e.hidden),e.hidden=n}}function ge(e,t,n){if(G(e))return Array.from(e).map(function(e){return ge(e,t,n)});if(J(e)){var i="toggle";return void 0!==n&&(i=n?"add":"remove"),e.classList[i](t),e.classList.contains(t)}return!1}function ye(e,t){return J(e)&&e.classList.contains(t)}function ve(e,t){var n=Element.prototype;return(n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.msMatchesSelector||function(){return Array.from(document.querySelectorAll(t)).includes(this)}).call(e,t)}function be(e){return this.elements.container.querySelectorAll(e)}function we(e){return this.elements.container.querySelector(e)}function ke(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];J(e)&&(e.focus({preventScroll:!0}),t&&ge(e,this.config.classNames.tabFocus))}var Te,xe={"audio/ogg":"vorbis","audio/wav":"1","video/webm":"vp8, vorbis","video/mp4":"avc1.42E01E, mp4a.40.2","video/ogg":"theora"},Ce={audio:"canPlayType"in document.createElement("audio"),video:"canPlayType"in document.createElement("video"),check:function(e,t,n){var i=re.isIPhone&&n&&Ce.playsinline,r=Ce[e]||"html5"!==t;return{api:r,ui:r&&Ce.rangeInput&&("video"!==e||!re.isIPhone||i)}},pip:!(re.isIPhone||!Y(ce("video").webkitSetPresentationMode)&&(!document.pictureInPictureEnabled||ce("video").disablePictureInPicture)),airplay:Y(window.WebKitPlaybackTargetAvailabilityEvent),playsinline:"playsInline"in document.createElement("video"),mime:function(e){if(ee(e))return!1;var t=k(e.split("/"),1)[0],n=e;if(!this.isHTML5||t!==this.type)return!1;Object.keys(xe).includes(n)&&(n+='; codecs="'.concat(xe[e],'"'));try{return Boolean(n&&this.media.canPlayType(n).replace(/no/,""))}catch(e){return!1}},textTracks:"textTracks"in document.createElement("video"),rangeInput:((Te=document.createElement("input")).type="range")===Te.type,touch:"ontouchstart"in document.documentElement,transitions:!1!==te,reducedMotion:"matchMedia"in window&&window.matchMedia("(prefers-reduced-motion)").matches},Ee=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){return e=!0,null}});window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Se(t,e,n){var i=this,r=3<arguments.length&&void 0!==arguments[3]&&arguments[3],o=!(4<arguments.length&&void 0!==arguments[4])||arguments[4],a=5<arguments.length&&void 0!==arguments[5]&&arguments[5];if(t&&"addEventListener"in t&&!ee(e)&&Y(n)){var s=e.split(" "),l=a;Ee&&(l={passive:o,capture:a}),s.forEach(function(e){i&&i.eventListeners&&r&&i.eventListeners.push({element:t,type:e,callback:n,options:l}),t[r?"addEventListener":"removeEventListener"](e,n,l)})}}function Ae(e){Se.call(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",2<arguments.length?arguments[2]:void 0,!0,!(3<arguments.length&&void 0!==arguments[3])||arguments[3],4<arguments.length&&void 0!==arguments[4]&&arguments[4])}function Ne(e){Se.call(this,e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",2<arguments.length?arguments[2]:void 0,!1,!(3<arguments.length&&void 0!==arguments[3])||arguments[3],4<arguments.length&&void 0!==arguments[4]&&arguments[4])}function Pe(r){var o=this,a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",s=2<arguments.length?arguments[2]:void 0,l=!(3<arguments.length&&void 0!==arguments[3])||arguments[3],c=4<arguments.length&&void 0!==arguments[4]&&arguments[4];Se.call(this,r,a,function e(){Ne(r,a,e,l,c);for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];s.apply(o,n)},!0,l,c)}function Le(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};if(J(e)&&!ee(t)){var r=new CustomEvent(t,{bubbles:n,detail:w(w({},i),{},{plyr:this})});e.dispatchEvent(r)}}function je(e){Z(e)&&e.then(null,function(){})}function Me(e){return(Q(e)||X(e)&&e.includes(":"))&&(Q(e)?e:e.split(":")).map(Number).every(K)}function De(e){if(!Q(e)||!e.every(K))return null;var t=k(e,2),n=t[0],i=t[1],r=function e(t,n){return 0===n?t:e(n,t%n)}(n,i);return[n/r,i/r]}function Oe(e){function t(e){return Me(e)?e.split(":").map(Number):null}var n=t(e);if(null===n&&(n=t(this.config.ratio)),null===n&&!ee(this.embed)&&Q(this.embed.ratio)&&(n=this.embed.ratio),null===n&&this.isHTML5){var i=this.media;n=De([i.videoWidth,i.videoHeight])}return n}function Ie(e){if(!this.isVideo)return{};var t=this.elements.wrapper,n=Oe.call(this,e),i=k(Q(n)?n:[0,0],2),r=100/i[0]*i[1];if(t.style.paddingBottom="".concat(r,"%"),this.isVimeo&&!this.config.vimeo.premium&&this.supported.ui){var o=100/this.media.offsetWidth*parseInt(window.getComputedStyle(this.media).paddingBottom,10),a=(o-r)/(o/50);this.media.style.transform="translateY(-".concat(a,"%)")}else this.isHTML5&&t.classList.toggle(this.config.classNames.videoFixedRatio,null!==n);return{padding:r,ratio:n}}var qe={getSources:function(){var n=this;return this.isHTML5?Array.from(this.media.querySelectorAll("source")).filter(function(e){var t=e.getAttribute("type");return!!ee(t)||Ce.mime.call(n,t)}):[]},getQualityOptions:function(){return this.config.quality.forced?this.config.quality.options:qe.getSources.call(this).map(function(e){return Number(e.getAttribute("size"))}).filter(Boolean)},setup:function(){if(this.isHTML5){var l=this;l.options.speed=l.config.speed.options,ee(this.config.ratio)||Ie.call(l),Object.defineProperty(l.media,"quality",{get:function(){var e=qe.getSources.call(l).find(function(e){return e.getAttribute("src")===l.source});return e&&Number(e.getAttribute("size"))},set:function(t){if(l.quality!==t){if(l.config.quality.forced&&Y(l.config.quality.onChange))l.config.quality.onChange(t);else{var e=qe.getSources.call(l).find(function(e){return Number(e.getAttribute("size"))===t});if(!e)return;var n=l.media,i=n.currentTime,r=n.paused,o=n.preload,a=n.readyState,s=n.playbackRate;l.media.src=e.getAttribute("src"),"none"===o&&!a||(l.once("loadedmetadata",function(){l.speed=s,l.currentTime=i,r||je(l.play())}),l.media.load())}Le.call(l,l.media,"qualitychange",!1,{quality:t})}}})}},cancelRequests:function(){this.isHTML5&&(de(qe.getSources.call(this)),this.media.setAttribute("src",this.config.blankVideo),this.media.load(),this.debug.log("Cancelled network requests"))}};function He(n){return Q(n)?n.filter(function(e,t){return n.indexOf(e)===t}):n}function _e(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return ee(e)?e:e.toString().replace(/{(\d+)}/g,function(e,t){return n[t].toString()})}function Re(){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"";return(0<arguments.length&&void 0!==arguments[0]?arguments[0]:"").replace(new RegExp(e.toString().replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1"),"g"),t.toString())}function Fe(){return(0<arguments.length&&void 0!==arguments[0]?arguments[0]:"").toString().replace(/\w\S*/g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()})}function Be(e){var t=document.createElement("div");return t.appendChild(e),t.innerHTML}function We(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(ee(e)||ee(t))return"";var r=oe(t.i18n,e);if(ee(r))return Object.keys(Ve).includes(e)?Ve[e]:"";var n={"{seektime}":t.seekTime,"{title}":t.title};return Object.entries(n).forEach(function(e){var t=k(e,2),n=t[0],i=t[1];r=Re(r,n,i)}),r}var Ve={pip:"PIP",airplay:"AirPlay",html5:"HTML5",vimeo:"Vimeo",youtube:"YouTube"},ze=(e(Ue,[{key:"get",value:function(e){if(!Ue.supported||!this.enabled)return null;var t=window.localStorage.getItem(this.key);if(ee(t))return null;var n=JSON.parse(t);return X(e)&&e.length?n[e]:n}},{key:"set",value:function(e){if(Ue.supported&&this.enabled&&$(e)){var t=this.get();ee(t)&&(t={}),ae(t,e),window.localStorage.setItem(this.key,JSON.stringify(t))}}}],[{key:"supported",get:function(){try{return"localStorage"in window&&(window.localStorage.setItem("___test","___test"),window.localStorage.removeItem("___test"),!0)}catch(e){return!1}}}]),Ue);function Ue(e){c(this,Ue),this.enabled=e.config.storage.enabled,this.key=e.config.storage.key}function $e(e,t){var r=1<arguments.length&&void 0!==t?t:"text";return new Promise(function(t,n){try{var i=new XMLHttpRequest;if(!("withCredentials"in i))return;i.addEventListener("load",function(){if("text"===r)try{t(JSON.parse(i.responseText))}catch(e){t(i.responseText)}else t(i.response)}),i.addEventListener("error",function(){throw new Error(i.status)}),i.open("GET",e,!0),i.responseType=r,i.send()}catch(e){n(e)}})}function Ke(e,t){if(X(e)){var n=X(t),i=function(){return null!==document.getElementById(t)},r=function(e,t){e.innerHTML=t,n&&i()||document.body.insertAdjacentElement("afterbegin",e)};if(!n||!i()){var o=ze.supported,a=document.createElement("div");if(a.setAttribute("hidden",""),n&&a.setAttribute("id",t),o){var s=window.localStorage.getItem("".concat("cache","-").concat(t));if(null!==s){var l=JSON.parse(s);r(a,l.content)}}$e(e).then(function(e){ee(e)||(o&&window.localStorage.setItem("".concat("cache","-").concat(t),JSON.stringify({content:e})),r(a,e))}).catch(function(){})}}}var Xe=function(e){return Math.trunc(e/60/60%60,10)},Ye=function(e){return Math.trunc(e/60%60,10)},Qe=function(e){return Math.trunc(e%60,10)};function Ge(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,r=1<arguments.length&&void 0!==t&&t,o=2<arguments.length&&void 0!==n&&n;if(!K(i))return Ge(void 0,r,o);function a(e){return"0".concat(e).slice(-2)}var s=Xe(i),l=Ye(i),c=Qe(i);return s=r||0<s?"".concat(s,":"):"","".concat(o&&0<i?"-":"").concat(s).concat(a(l),":").concat(a(c))}var Je={getIconUrl:function(){var e=new URL(this.config.iconUrl,window.location).host!==window.location.host||re.isIE&&!window.svg4everybody;return{url:this.config.iconUrl,cors:e}},findElements:function(){try{return this.elements.controls=we.call(this,this.config.selectors.controls.wrapper),this.elements.buttons={play:be.call(this,this.config.selectors.buttons.play),pause:we.call(this,this.config.selectors.buttons.pause),restart:we.call(this,this.config.selectors.buttons.restart),rewind:we.call(this,this.config.selectors.buttons.rewind),fastForward:we.call(this,this.config.selectors.buttons.fastForward),mute:we.call(this,this.config.selectors.buttons.mute),pip:we.call(this,this.config.selectors.buttons.pip),airplay:we.call(this,this.config.selectors.buttons.airplay),settings:we.call(this,this.config.selectors.buttons.settings),captions:we.call(this,this.config.selectors.buttons.captions),fullscreen:we.call(this,this.config.selectors.buttons.fullscreen)},this.elements.progress=we.call(this,this.config.selectors.progress),this.elements.inputs={seek:we.call(this,this.config.selectors.inputs.seek),volume:we.call(this,this.config.selectors.inputs.volume)},this.elements.display={buffer:we.call(this,this.config.selectors.display.buffer),currentTime:we.call(this,this.config.selectors.display.currentTime),duration:we.call(this,this.config.selectors.display.duration)},J(this.elements.progress)&&(this.elements.display.seekTooltip=this.elements.progress.querySelector(".".concat(this.config.classNames.tooltip))),!0}catch(e){return this.debug.warn("It looks like there is a problem with your custom controls HTML",e),this.toggleNativeControls(!0),!1}},createIcon:function(e,t){var n=Je.getIconUrl.call(this),i="".concat(n.cors?"":n.url,"#").concat(this.config.iconPrefix),r=document.createElementNS("http://www.w3.org/2000/svg","svg");le(r,ae(t,{"aria-hidden":"true",focusable:"false"}));var o=document.createElementNS("http://www.w3.org/2000/svg","use"),a="".concat(i,"-").concat(e);return"href"in o&&o.setAttributeNS("http://www.w3.org/1999/xlink","href",a),o.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",a),r.appendChild(o),r},createLabel:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=We(e,this.config);return ce("span",w(w({},t),{},{class:[t.class,this.config.classNames.hidden].filter(Boolean).join(" ")}),n)},createBadge:function(e){if(ee(e))return null;var t=ce("span",{class:this.config.classNames.menu.value});return t.appendChild(ce("span",{class:this.config.classNames.menu.badge},e)),t},createButton:function(e,t){var n=this,i=ae({},t),r=function(e){var t=(0<arguments.length&&void 0!==e?e:"").toString();return(t=function(e){var t=(0<arguments.length&&void 0!==e?e:"").toString();return t=Re(t,"-"," "),t=Re(t,"_"," "),t=Fe(t),Re(t," ","")}(t)).charAt(0).toLowerCase()+t.slice(1)}(e),o={element:"button",toggle:!1,label:null,icon:null,labelPressed:null,iconPressed:null};switch(["element","icon","label"].forEach(function(e){Object.keys(i).includes(e)&&(o[e]=i[e],delete i[e])}),"button"!==o.element||Object.keys(i).includes("type")||(i.type="button"),Object.keys(i).includes("class")?i.class.split(" ").some(function(e){return e===n.config.classNames.control})||ae(i,{class:"".concat(i.class," ").concat(this.config.classNames.control)}):i.class=this.config.classNames.control,e){case"play":o.toggle=!0,o.label="play",o.labelPressed="pause",o.icon="play",o.iconPressed="pause";break;case"mute":o.toggle=!0,o.label="mute",o.labelPressed="unmute",o.icon="volume",o.iconPressed="muted";break;case"captions":o.toggle=!0,o.label="enableCaptions",o.labelPressed="disableCaptions",o.icon="captions-off",o.iconPressed="captions-on";break;case"fullscreen":o.toggle=!0,o.label="enterFullscreen",o.labelPressed="exitFullscreen",o.icon="enter-fullscreen",o.iconPressed="exit-fullscreen";break;case"play-large":i.class+=" ".concat(this.config.classNames.control,"--overlaid"),r="play",o.label="play",o.icon="play";break;default:ee(o.label)&&(o.label=r),ee(o.icon)&&(o.icon=e)}var a=ce(o.element);return o.toggle?(a.appendChild(Je.createIcon.call(this,o.iconPressed,{class:"icon--pressed"})),a.appendChild(Je.createIcon.call(this,o.icon,{class:"icon--not-pressed"})),a.appendChild(Je.createLabel.call(this,o.labelPressed,{class:"label--pressed"})),a.appendChild(Je.createLabel.call(this,o.label,{class:"label--not-pressed"}))):(a.appendChild(Je.createIcon.call(this,o.icon)),a.appendChild(Je.createLabel.call(this,o.label))),ae(i,pe(this.config.selectors.buttons[r],i)),le(a,i),"play"===r?(Q(this.elements.buttons[r])||(this.elements.buttons[r]=[]),this.elements.buttons[r].push(a)):this.elements.buttons[r]=a,a},createRange:function(e,t){var n=ce("input",ae(pe(this.config.selectors.inputs[e]),{type:"range",min:0,max:100,step:.01,value:0,autocomplete:"off",role:"slider","aria-label":We(e,this.config),"aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":0},t));return this.elements.inputs[e]=n,Je.updateRangeFill.call(this,n),z.setup(n),n},createProgress:function(e,t){var n=ce("progress",ae(pe(this.config.selectors.display[e]),{min:0,max:100,value:0,role:"progressbar","aria-hidden":!0},t));if("volume"!==e){n.appendChild(ce("span",null,"0"));var i={played:"played",buffer:"buffered"}[e],r=i?We(i,this.config):"";n.innerText="% ".concat(r.toLowerCase())}return this.elements.display[e]=n},createTime:function(e,t){var n=pe(this.config.selectors.display[e],t),i=ce("div",ae(n,{class:"".concat(n.class?n.class:""," ").concat(this.config.classNames.display.time," ").trim(),"aria-label":We(e,this.config)}),"00:00");return this.elements.display[e]=i},bindMenuItemShortcuts:function(i,r){var o=this;Ae.call(this,i,"keydown keyup",function(e){if([32,38,39,40].includes(e.which)&&(e.preventDefault(),e.stopPropagation(),"keydown"!==e.type)){var t,n=ve(i,'[role="menuitemradio"]');!n&&[32,39].includes(e.which)?Je.showMenuPanel.call(o,r,!0):32!==e.which&&(40===e.which||n&&39===e.which?(t=i.nextElementSibling,J(t)||(t=i.parentNode.firstElementChild)):(t=i.previousElementSibling,J(t)||(t=i.parentNode.lastElementChild)),ke.call(o,t,!0))}},!1),Ae.call(this,i,"keyup",function(e){13===e.which&&Je.focusFirstMenuItem.call(o,null,!0)})},createMenuItem:function(e){var t=this,n=e.value,i=e.list,r=e.type,o=e.title,a=e.badge,s=void 0===a?null:a,l=e.checked,c=void 0!==l&&l,u=pe(this.config.selectors.inputs[r]),d=ce("button",ae(u,{type:"button",role:"menuitemradio",class:"".concat(this.config.classNames.control," ").concat(u.class?u.class:"").trim(),"aria-checked":c,value:n})),h=ce("span");h.innerHTML=o,J(s)&&h.appendChild(s),d.appendChild(h),Object.defineProperty(d,"checked",{enumerable:!0,get:function(){return"true"===d.getAttribute("aria-checked")},set:function(e){e&&Array.from(d.parentNode.children).filter(function(e){return ve(e,'[role="menuitemradio"]')}).forEach(function(e){return e.setAttribute("aria-checked","false")}),d.setAttribute("aria-checked",e?"true":"false")}}),this.listeners.bind(d,"click keyup",function(e){if(!q(e)||32===e.which){switch(e.preventDefault(),e.stopPropagation(),d.checked=!0,r){case"language":t.currentTrack=Number(n);break;case"quality":t.quality=n;break;case"speed":t.speed=parseFloat(n)}Je.showMenuPanel.call(t,"home",q(e))}},r,!1),Je.bindMenuItemShortcuts.call(this,d,r),i.appendChild(d)},formatTime:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return K(e)?Ge(e,0<Xe(this.duration),t):e},updateTimeDisplay:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];J(e)&&K(t)&&(e.innerText=Je.formatTime(t,n))},updateVolume:function(){this.supported.ui&&(J(this.elements.inputs.volume)&&Je.setRange.call(this,this.elements.inputs.volume,this.muted?0:this.volume),J(this.elements.buttons.mute)&&(this.elements.buttons.mute.pressed=this.muted||0===this.volume))},setRange:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;J(e)&&(e.value=t,Je.updateRangeFill.call(this,e))},updateProgress:function(e){var o=this;if(this.supported.ui&&I(e)){var t,n,i=0;if(e)switch(e.type){case"timeupdate":case"seeking":case"seeked":t=this.currentTime,n=this.duration,i=0===t||0===n||Number.isNaN(t)||Number.isNaN(n)?0:(t/n*100).toFixed(2),"timeupdate"===e.type&&Je.setRange.call(this,this.elements.inputs.seek,i);break;case"playing":case"progress":!function(e,t){var n=K(t)?t:0,i=J(e)?e:o.elements.display.buffer;if(J(i)){i.value=n;var r=i.getElementsByTagName("span")[0];J(r)&&(r.childNodes[0].nodeValue=n)}}(this.elements.display.buffer,100*this.buffered)}}},updateRangeFill:function(e){var t=I(e)?e.target:e;if(J(t)&&"range"===t.getAttribute("type")){if(ve(t,this.config.selectors.inputs.seek)){t.setAttribute("aria-valuenow",this.currentTime);var n=Je.formatTime(this.currentTime),i=Je.formatTime(this.duration),r=We("seekLabel",this.config);t.setAttribute("aria-valuetext",r.replace("{currentTime}",n).replace("{duration}",i))}else if(ve(t,this.config.selectors.inputs.volume)){var o=100*t.value;t.setAttribute("aria-valuenow",o),t.setAttribute("aria-valuetext","".concat(o.toFixed(1),"%"))}else t.setAttribute("aria-valuenow",t.value);re.isWebkit&&t.style.setProperty("--value","".concat(t.value/t.max*100,"%"))}},updateSeekTooltip:function(e){var t=this;if(this.config.tooltips.seek&&J(this.elements.inputs.seek)&&J(this.elements.display.seekTooltip)&&0!==this.duration){var n="".concat(this.config.classNames.tooltip,"--visible"),i=function(e){return ge(t.elements.display.seekTooltip,n,e)};if(this.touch)i(!1);else{var r=0,o=this.elements.progress.getBoundingClientRect();if(I(e))r=100/o.width*(e.pageX-o.left);else{if(!ye(this.elements.display.seekTooltip,n))return;r=parseFloat(this.elements.display.seekTooltip.style.left,10)}r<0?r=0:100<r&&(r=100),Je.updateTimeDisplay.call(this,this.elements.display.seekTooltip,this.duration/100*r),this.elements.display.seekTooltip.style.left="".concat(r,"%"),I(e)&&["mouseenter","mouseleave"].includes(e.type)&&i("mouseenter"===e.type)}}},timeUpdate:function(e){var t=!J(this.elements.display.duration)&&this.config.invertTime;Je.updateTimeDisplay.call(this,this.elements.display.currentTime,t?this.duration-this.currentTime:this.currentTime,t),e&&"timeupdate"===e.type&&this.media.seeking||Je.updateProgress.call(this,e)},durationUpdate:function(){if(this.supported.ui&&(this.config.invertTime||!this.currentTime)){if(this.duration>=Math.pow(2,32))return me(this.elements.display.currentTime,!0),void me(this.elements.progress,!0);J(this.elements.inputs.seek)&&this.elements.inputs.seek.setAttribute("aria-valuemax",this.duration);var e=J(this.elements.display.duration);!e&&this.config.displayDuration&&this.paused&&Je.updateTimeDisplay.call(this,this.elements.display.currentTime,this.duration),e&&Je.updateTimeDisplay.call(this,this.elements.display.duration,this.duration),Je.updateSeekTooltip.call(this)}},toggleMenuButton:function(e,t){me(this.elements.settings.buttons[e],!t)},updateSetting:function(e,t,n){var i=this.elements.settings.panels[e],r=null,o=t;if("captions"===e)r=this.currentTrack;else{if(r=ee(n)?this[e]:n,ee(r)&&(r=this.config[e].default),!ee(this.options[e])&&!this.options[e].includes(r))return void this.debug.warn("Unsupported value of '".concat(r,"' for ").concat(e));if(!this.config[e].options.includes(r))return void this.debug.warn("Disabled value of '".concat(r,"' for ").concat(e))}if(J(o)||(o=i&&i.querySelector('[role="menu"]')),J(o)){this.elements.settings.buttons[e].querySelector(".".concat(this.config.classNames.menu.value)).innerHTML=Je.getLabel.call(this,e,r);var a=o&&o.querySelector('[value="'.concat(r,'"]'));J(a)&&(a.checked=!0)}},getLabel:function(e,t){switch(e){case"speed":return 1===t?We("normal",this.config):"".concat(t,"&times;");case"quality":if(K(t)){var n=We("qualityLabel.".concat(t),this.config);return n.length?n:"".concat(t,"p")}return Fe(t);case"captions":return nt.getLabel.call(this);default:return null}},setQualityMenu:function(e){var i=this;if(J(this.elements.settings.panels.quality)){var n=this.elements.settings.panels.quality.querySelector('[role="menu"]');Q(e)&&(this.options.quality=He(e).filter(function(e){return i.config.quality.options.includes(e)}));var t=!ee(this.options.quality)&&1<this.options.quality.length;if(Je.toggleMenuButton.call(this,"quality",t),he(n),Je.checkMenu.call(this),t){this.options.quality.sort(function(e,t){var n=i.config.quality.options;return n.indexOf(e)>n.indexOf(t)?1:-1}).forEach(function(e){var t;Je.createMenuItem.call(i,{value:e,list:n,type:"quality",title:Je.getLabel.call(i,"quality",e),badge:(t=We("qualityBadge.".concat(e),i.config)).length?Je.createBadge.call(i,t):null})}),Je.updateSetting.call(this,"quality",n)}}},setCaptionsMenu:function(){var n=this;if(J(this.elements.settings.panels.captions)){var i=this.elements.settings.panels.captions.querySelector('[role="menu"]'),e=nt.getTracks.call(this),t=Boolean(e.length);if(Je.toggleMenuButton.call(this,"captions",t),he(i),Je.checkMenu.call(this),t){var r=e.map(function(e,t){return{value:t,checked:n.captions.toggled&&n.currentTrack===t,title:nt.getLabel.call(n,e),badge:e.language&&Je.createBadge.call(n,e.language.toUpperCase()),list:i,type:"language"}});r.unshift({value:-1,checked:!this.captions.toggled,title:We("disabled",this.config),list:i,type:"language"}),r.forEach(Je.createMenuItem.bind(this)),Je.updateSetting.call(this,"captions",i)}}},setSpeedMenu:function(){var t=this;if(J(this.elements.settings.panels.speed)){var n=this.elements.settings.panels.speed.querySelector('[role="menu"]');this.options.speed=this.options.speed.filter(function(e){return e>=t.minimumSpeed&&e<=t.maximumSpeed});var e=!ee(this.options.speed)&&1<this.options.speed.length;Je.toggleMenuButton.call(this,"speed",e),he(n),Je.checkMenu.call(this),e&&(this.options.speed.forEach(function(e){Je.createMenuItem.call(t,{value:e,list:n,type:"speed",title:Je.getLabel.call(t,"speed",e)})}),Je.updateSetting.call(this,"speed",n))}},checkMenu:function(){var e=this.elements.settings.buttons,t=!ee(e)&&Object.values(e).some(function(e){return!e.hidden});me(this.elements.settings.menu,!t)},focusFirstMenuItem:function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(!this.elements.settings.popup.hidden){var n=e;J(n)||(n=Object.values(this.elements.settings.panels).find(function(e){return!e.hidden}));var i=n.querySelector('[role^="menuitem"]');ke.call(this,i,t)}},toggleMenu:function(e){var t=this.elements.settings.popup,n=this.elements.buttons.settings;if(J(t)&&J(n)){var i=t.hidden,r=i;if(O(e))r=e;else if(q(e)&&27===e.which)r=!1;else if(I(e)){var o=Y(e.composedPath)?e.composedPath()[0]:e.target,a=t.contains(o);if(a||!a&&e.target!==n&&r)return}n.setAttribute("aria-expanded",r),me(t,!r),ge(this.elements.container,this.config.classNames.menu.open,r),r&&q(e)?Je.focusFirstMenuItem.call(this,null,!0):r||i||ke.call(this,n,q(e))}},getMenuSize:function(e){var t=e.cloneNode(!0);t.style.position="absolute",t.style.opacity=0,t.removeAttribute("hidden"),e.parentNode.appendChild(t);var n=t.scrollWidth,i=t.scrollHeight;return de(t),{width:n,height:i}},showMenuPanel:function(){var n=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],i=this.elements.container.querySelector("#plyr-settings-".concat(this.id,"-").concat(e));if(J(i)){var r=i.parentNode,o=Array.from(r.children).find(function(e){return!e.hidden});if(Ce.transitions&&!Ce.reducedMotion){r.style.width="".concat(o.scrollWidth,"px"),r.style.height="".concat(o.scrollHeight,"px");var a=Je.getMenuSize.call(this,i);Ae.call(this,r,te,function e(t){t.target===r&&["width","height"].includes(t.propertyName)&&(r.style.width="",r.style.height="",Ne.call(n,r,te,e))}),r.style.width="".concat(a.width,"px"),r.style.height="".concat(a.height,"px")}me(o,!0),me(i,!1),Je.focusFirstMenuItem.call(this,i,t)}},setDownloadUrl:function(){var e=this.elements.buttons.download;J(e)&&e.setAttribute("href",this.download)},create:function(f){var p=this,m=Je.bindMenuItemShortcuts,g=Je.createButton,y=Je.createProgress,v=Je.createRange,b=Je.createTime,e=Je.setQualityMenu,t=Je.setSpeedMenu,w=Je.showMenuPanel;this.elements.controls=null,Q(this.config.controls)&&this.config.controls.includes("play-large")&&this.elements.container.appendChild(g.call(this,"play-large"));var k=ce("div",pe(this.config.selectors.controls.wrapper));this.elements.controls=k;var T={class:"plyr__controls__item"};return He(Q(this.config.controls)?this.config.controls:[]).forEach(function(e){if("restart"===e&&k.appendChild(g.call(p,"restart",T)),"rewind"===e&&k.appendChild(g.call(p,"rewind",T)),"play"===e&&k.appendChild(g.call(p,"play",T)),"fast-forward"===e&&k.appendChild(g.call(p,"fast-forward",T)),"progress"===e){var t=ce("div",{class:"".concat(T.class," plyr__progress__container")}),n=ce("div",pe(p.config.selectors.progress));if(n.appendChild(v.call(p,"seek",{id:"plyr-seek-".concat(f.id)})),n.appendChild(y.call(p,"buffer")),p.config.tooltips.seek){var i=ce("span",{class:p.config.classNames.tooltip},"00:00");n.appendChild(i),p.elements.display.seekTooltip=i}p.elements.progress=n,t.appendChild(p.elements.progress),k.appendChild(t)}if("current-time"===e&&k.appendChild(b.call(p,"currentTime",T)),"duration"===e&&k.appendChild(b.call(p,"duration",T)),"mute"===e||"volume"===e){var r=p.elements.volume;if(J(r)&&k.contains(r)||(r=ce("div",ae({},T,{class:"".concat(T.class," plyr__volume").trim()})),p.elements.volume=r,k.appendChild(r)),"mute"===e&&r.appendChild(g.call(p,"mute")),"volume"===e&&!re.isIos){var o={max:1,step:.05,value:p.config.volume};r.appendChild(v.call(p,"volume",ae(o,{id:"plyr-volume-".concat(f.id)})))}}if("captions"===e&&k.appendChild(g.call(p,"captions",T)),"settings"===e&&!ee(p.config.settings)){var a=ce("div",ae({},T,{class:"".concat(T.class," plyr__menu").trim(),hidden:""}));a.appendChild(g.call(p,"settings",{"aria-haspopup":!0,"aria-controls":"plyr-settings-".concat(f.id),"aria-expanded":!1}));var s=ce("div",{class:"plyr__menu__container",id:"plyr-settings-".concat(f.id),hidden:""}),l=ce("div"),c=ce("div",{id:"plyr-settings-".concat(f.id,"-home")}),u=ce("div",{role:"menu"});c.appendChild(u),l.appendChild(c),p.elements.settings.panels.home=c,p.config.settings.forEach(function(e){var t=ce("button",ae(pe(p.config.selectors.buttons.settings),{type:"button",class:"".concat(p.config.classNames.control," ").concat(p.config.classNames.control,"--forward"),role:"menuitem","aria-haspopup":!0,hidden:""}));m.call(p,t,e),Ae.call(p,t,"click",function(){w.call(p,e,!1)});var n=ce("span",null,We(e,p.config)),i=ce("span",{class:p.config.classNames.menu.value});i.innerHTML=f[e],n.appendChild(i),t.appendChild(n),u.appendChild(t);var r=ce("div",{id:"plyr-settings-".concat(f.id,"-").concat(e),hidden:""}),o=ce("button",{type:"button",class:"".concat(p.config.classNames.control," ").concat(p.config.classNames.control,"--back")});o.appendChild(ce("span",{"aria-hidden":!0},We(e,p.config))),o.appendChild(ce("span",{class:p.config.classNames.hidden},We("menuBack",p.config))),Ae.call(p,r,"keydown",function(e){37===e.which&&(e.preventDefault(),e.stopPropagation(),w.call(p,"home",!0))},!1),Ae.call(p,o,"click",function(){w.call(p,"home",!1)}),r.appendChild(o),r.appendChild(ce("div",{role:"menu"})),l.appendChild(r),p.elements.settings.buttons[e]=t,p.elements.settings.panels[e]=r}),s.appendChild(l),a.appendChild(s),k.appendChild(a),p.elements.settings.popup=s,p.elements.settings.menu=a}if("pip"===e&&Ce.pip&&k.appendChild(g.call(p,"pip",T)),"airplay"===e&&Ce.airplay&&k.appendChild(g.call(p,"airplay",T)),"download"===e){var d=ae({},T,{element:"a",href:p.download,target:"_blank"});p.isHTML5&&(d.download="");var h=p.config.urls.download;!_(h)&&p.isEmbed&&ae(d,{icon:"logo-".concat(p.provider),label:p.provider}),k.appendChild(g.call(p,"download",d))}"fullscreen"===e&&k.appendChild(g.call(p,"fullscreen",T))}),this.isHTML5&&e.call(this,qe.getQualityOptions.call(this)),t.call(this),k},inject:function(){var n=this;if(this.config.loadSprite){var e=Je.getIconUrl.call(this);e.cors&&Ke(e.url,"sprite-plyr")}this.id=Math.floor(1e4*Math.random());var t=null;this.elements.controls=null;var r,i,o={id:this.id,seektime:this.config.seekTime,title:this.config.title},a=!0;if(Y(this.config.controls)&&(this.config.controls=this.config.controls.call(this,o)),this.config.controls||(this.config.controls=[]),J(this.config.controls)||X(this.config.controls)?t=this.config.controls:(t=Je.create.call(this,{id:this.id,seektime:this.config.seekTime,speed:this.speed,quality:this.quality,captions:nt.getLabel.call(this)}),a=!1),a&&X(this.config.controls)&&(r=t,Object.entries(o).forEach(function(e){var t=k(e,2),n=t[0],i=t[1];r=Re(r,"{".concat(n,"}"),i)}),t=r),X(this.config.selectors.controls.container)&&(i=document.querySelector(this.config.selectors.controls.container)),J(i)||(i=this.elements.container),i[J(t)?"insertAdjacentElement":"insertAdjacentHTML"]("afterbegin",t),J(this.elements.controls)||Je.findElements.call(this),!ee(this.elements.buttons)){var s=function(e){var t=n.config.classNames.controlPressed;Object.defineProperty(e,"pressed",{enumerable:!0,get:function(){return ye(e,t)},set:function(){ge(e,t,0<arguments.length&&void 0!==arguments[0]&&arguments[0])}})};Object.values(this.elements.buttons).filter(Boolean).forEach(function(e){Q(e)||G(e)?Array.from(e).filter(Boolean).forEach(s):s(e)})}if(re.isEdge&&ie(i),this.config.tooltips.controls){var l=this.config,c=l.classNames,u=l.selectors,d="".concat(u.controls.wrapper," ").concat(u.labels," .").concat(c.hidden),h=be.call(this,d);Array.from(h).forEach(function(e){ge(e,n.config.classNames.hidden,!1),ge(e,n.config.classNames.tooltip,!0)})}}};function Ze(e,t){var n=e;if(!(1<arguments.length&&void 0!==t)||t){var i=document.createElement("a");i.href=n,n=i.href}try{return new URL(n)}catch(e){return null}}function et(e){var r=new URLSearchParams;return $(e)&&Object.entries(e).forEach(function(e){var t=k(e,2),n=t[0],i=t[1];r.set(n,i)}),r}function tt(){}var nt={setup:function(){if(this.supported.ui)if(!this.isVideo||this.isYouTube||this.isHTML5&&!Ce.textTracks)Q(this.config.controls)&&this.config.controls.includes("settings")&&this.config.settings.includes("captions")&&Je.setCaptionsMenu.call(this);else{if(J(this.elements.captions)||(this.elements.captions=ce("div",pe(this.config.selectors.captions)),o=this.elements.captions,a=this.elements.wrapper,J(o)&&J(a)&&a.parentNode.insertBefore(o,a.nextSibling)),re.isIE&&window.URL){var e=this.media.querySelectorAll("track");Array.from(e).forEach(function(t){var e=t.getAttribute("src"),n=Ze(e);null!==n&&n.hostname!==window.location.href.hostname&&["http:","https:"].includes(n.protocol)&&$e(e,"blob").then(function(e){t.setAttribute("src",window.URL.createObjectURL(e))}).catch(function(){de(t)})})}var t=He((navigator.languages||[navigator.language||navigator.userLanguage||"en"]).map(function(e){return e.split("-")[0]})),n=(this.storage.get("language")||this.config.captions.language||"auto").toLowerCase();"auto"===n&&(n=k(t,1)[0]);var i=this.storage.get("captions");if(O(i)||(i=this.config.captions.active),Object.assign(this.captions,{toggled:!1,active:i,language:n,languages:t}),this.isHTML5){var r=this.config.captions.update?"addtrack removetrack":"removetrack";Ae.call(this,this.media.textTracks,r,nt.update.bind(this))}setTimeout(nt.update.bind(this),0)}var o,a},update:function(){var t=this,e=nt.getTracks.call(this,!0),n=this.captions,i=n.active,r=n.language,o=n.meta,a=n.currentTrackNode,s=Boolean(e.find(function(e){return e.language===r}));this.isHTML5&&this.isVideo&&e.filter(function(e){return!o.get(e)}).forEach(function(e){t.debug.log("Track added",e),o.set(e,{default:"showing"===e.mode}),"showing"===e.mode&&(e.mode="hidden"),Ae.call(t,e,"cuechange",function(){return nt.updateCues.call(t)})}),(s&&this.language!==r||!e.includes(a))&&(nt.setLanguage.call(this,r),nt.toggle.call(this,i&&s)),ge(this.elements.container,this.config.classNames.captions.enabled,!ee(e)),Q(this.config.controls)&&this.config.controls.includes("settings")&&this.config.settings.includes("captions")&&Je.setCaptionsMenu.call(this)},toggle:function(e){var t=this,n=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];if(this.supported.ui){var i=this.captions.toggled,r=this.config.classNames.captions.active,o=U(e)?!i:e;if(o!==i){if(n||(this.captions.active=o,this.storage.set({captions:o})),!this.language&&o&&!n){var a=nt.getTracks.call(this),s=nt.findTrack.call(this,[this.captions.language].concat(l(this.captions.languages)),!0);return this.captions.language=s.language,void nt.set.call(this,a.indexOf(s))}this.elements.buttons.captions&&(this.elements.buttons.captions.pressed=o),ge(this.elements.container,r,o),this.captions.toggled=o,Je.updateSetting.call(this,"captions"),Le.call(this,this.media,o?"captionsenabled":"captionsdisabled")}setTimeout(function(){o&&t.captions.toggled&&(t.captions.currentTrackNode.mode="hidden")})}},set:function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=nt.getTracks.call(this);if(-1!==e)if(K(e))if(e in n){if(this.captions.currentTrack!==e){var i=n[this.captions.currentTrack=e],r=(i||{}).language;this.captions.currentTrackNode=i,Je.updateSetting.call(this,"captions"),t||(this.captions.language=r,this.storage.set({language:r})),this.isVimeo&&this.embed.enableTextTrack(r),Le.call(this,this.media,"languagechange")}nt.toggle.call(this,!0,t),this.isHTML5&&this.isVideo&&nt.updateCues.call(this)}else this.debug.warn("Track not found",e);else this.debug.warn("Invalid caption argument",e);else nt.toggle.call(this,!1,t)},setLanguage:function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];if(X(e)){var n=e.toLowerCase();this.captions.language=n;var i=nt.getTracks.call(this),r=nt.findTrack.call(this,[n]);nt.set.call(this,i.indexOf(r),t)}else this.debug.warn("Invalid language argument",e)},getTracks:function(){var t=this,n=0<arguments.length&&void 0!==arguments[0]&&arguments[0];return Array.from((this.media||{}).textTracks||[]).filter(function(e){return!t.isHTML5||n||t.captions.meta.has(e)}).filter(function(e){return["captions","subtitles"].includes(e.kind)})},findTrack:function(e){function n(e){return Number((t.captions.meta.get(e)||{}).default)}var i,t=this,r=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=nt.getTracks.call(this),a=Array.from(o).sort(function(e,t){return n(t)-n(e)});return e.every(function(t){return!(i=a.find(function(e){return e.language===t}))}),i||(r?a[0]:void 0)},getCurrentTrack:function(){return nt.getTracks.call(this)[this.currentTrack]},getLabel:function(e){var t=e;return!H(t)&&Ce.textTracks&&this.captions.toggled&&(t=nt.getCurrentTrack.call(this)),H(t)?ee(t.label)?ee(t.language)?We("enabled",this.config):e.language.toUpperCase():t.label:We("disabled",this.config)},updateCues:function(e){if(this.supported.ui)if(J(this.elements.captions))if(U(e)||Array.isArray(e)){var t=e;if(!t){var n=nt.getCurrentTrack.call(this);t=Array.from((n||{}).activeCues||[]).map(function(e){return e.getCueAsHTML()}).map(Be)}var i=t.map(function(e){return e.trim()}).join("\n");if(i!==this.elements.captions.innerHTML){he(this.elements.captions);var r=ce("span",pe(this.config.selectors.caption));r.innerHTML=i,this.elements.captions.appendChild(r),Le.call(this,this.media,"cuechange")}}else this.debug.warn("updateCues: Invalid input",e);else this.debug.warn("No captions element to render to")}},it={enabled:!0,title:"",debug:!1,autoplay:!1,autopause:!0,playsinline:!0,seekTime:10,volume:1,muted:!1,duration:null,displayDuration:!0,invertTime:!0,toggleInvert:!0,ratio:null,clickToPlay:!0,hideControls:!0,resetOnEnd:!1,disableContextMenu:!0,loadSprite:!0,iconPrefix:"plyr",iconUrl:"https://cdn.plyr.io/3.6.2/plyr.svg",blankVideo:"https://cdn.plyr.io/static/blank.mp4",quality:{default:576,options:[4320,2880,2160,1440,1080,720,576,480,360,240],forced:!1,onChange:null},loop:{active:!1},speed:{selected:1,options:[.5,.75,1,1.25,1.5,1.75,2,4]},keyboard:{focused:!0,global:!1},tooltips:{controls:!1,seek:!0},captions:{active:!1,language:"auto",update:!1},fullscreen:{enabled:!0,fallback:!0,iosNative:!1},storage:{enabled:!0,key:"plyr"},controls:["play-large","play","progress","current-time","mute","volume","captions","settings","pip","airplay","fullscreen"],settings:["captions","quality","speed"],i18n:{restart:"Restart",rewind:"Rewind {seektime}s",play:"Play",pause:"Pause",fastForward:"Forward {seektime}s",seek:"Seek",seekLabel:"{currentTime} of {duration}",played:"Played",buffered:"Buffered",currentTime:"Current time",duration:"Duration",volume:"Volume",mute:"Mute",unmute:"Unmute",enableCaptions:"Enable captions",disableCaptions:"Disable captions",download:"Download",enterFullscreen:"Enter fullscreen",exitFullscreen:"Exit fullscreen",frameTitle:"Player for {title}",captions:"Captions",settings:"Settings",pip:"PIP",menuBack:"Go back to previous menu",speed:"Speed",normal:"Normal",quality:"Quality",loop:"Loop",start:"Start",end:"End",all:"All",reset:"Reset",disabled:"Disabled",enabled:"Enabled",advertisement:"Ad",qualityBadge:{2160:"4K",1440:"HD",1080:"HD",720:"HD",576:"SD",480:"SD"}},urls:{download:null,vimeo:{sdk:"https://player.vimeo.com/api/player.js",iframe:"https://player.vimeo.com/video/{0}?{1}",api:"https://vimeo.com/api/v2/video/{0}.json"},youtube:{sdk:"https://www.youtube.com/iframe_api",api:"https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}"},googleIMA:{sdk:"https://imasdk.googleapis.com/js/sdkloader/ima3.js"}},listeners:{seek:null,play:null,pause:null,restart:null,rewind:null,fastForward:null,mute:null,volume:null,captions:null,download:null,fullscreen:null,pip:null,airplay:null,speed:null,quality:null,loop:null,language:null},events:["ended","progress","stalled","playing","waiting","canplay","canplaythrough","loadstart","loadeddata","loadedmetadata","timeupdate","volumechange","play","pause","error","seeking","seeked","emptied","ratechange","cuechange","download","enterfullscreen","exitfullscreen","captionsenabled","captionsdisabled","languagechange","controlshidden","controlsshown","ready","statechange","qualitychange","adsloaded","adscontentpause","adscontentresume","adstarted","adsmidpoint","adscomplete","adsallcomplete","adsimpression","adsclick"],selectors:{editable:"input, textarea, select, [contenteditable]",container:".plyr",controls:{container:null,wrapper:".plyr__controls"},labels:"[data-plyr]",buttons:{play:'[data-plyr="play"]',pause:'[data-plyr="pause"]',restart:'[data-plyr="restart"]',rewind:'[data-plyr="rewind"]',fastForward:'[data-plyr="fast-forward"]',mute:'[data-plyr="mute"]',captions:'[data-plyr="captions"]',download:'[data-plyr="download"]',fullscreen:'[data-plyr="fullscreen"]',pip:'[data-plyr="pip"]',airplay:'[data-plyr="airplay"]',settings:'[data-plyr="settings"]',loop:'[data-plyr="loop"]'},inputs:{seek:'[data-plyr="seek"]',volume:'[data-plyr="volume"]',speed:'[data-plyr="speed"]',language:'[data-plyr="language"]',quality:'[data-plyr="quality"]'},display:{currentTime:".plyr__time--current",duration:".plyr__time--duration",buffer:".plyr__progress__buffer",loop:".plyr__progress__loop",volume:".plyr__volume--display"},progress:".plyr__progress",captions:".plyr__captions",caption:".plyr__caption"},classNames:{type:"plyr--{0}",provider:"plyr--{0}",video:"plyr__video-wrapper",embed:"plyr__video-embed",videoFixedRatio:"plyr__video-wrapper--fixed-ratio",embedContainer:"plyr__video-embed__container",poster:"plyr__poster",posterEnabled:"plyr__poster-enabled",ads:"plyr__ads",control:"plyr__control",controlPressed:"plyr__control--pressed",playing:"plyr--playing",paused:"plyr--paused",stopped:"plyr--stopped",loading:"plyr--loading",hover:"plyr--hover",tooltip:"plyr__tooltip",cues:"plyr__cues",hidden:"plyr__sr-only",hideControls:"plyr--hide-controls",isIos:"plyr--is-ios",isTouch:"plyr--is-touch",uiSupported:"plyr--full-ui",noTransition:"plyr--no-transition",display:{time:"plyr__time"},menu:{value:"plyr__menu__value",badge:"plyr__badge",open:"plyr--menu-open"},captions:{enabled:"plyr--captions-enabled",active:"plyr--captions-active"},fullscreen:{enabled:"plyr--fullscreen-enabled",fallback:"plyr--fullscreen-fallback"},pip:{supported:"plyr--pip-supported",active:"plyr--pip-active"},airplay:{supported:"plyr--airplay-supported",active:"plyr--airplay-active"},tabFocus:"plyr__tab-focus",previewThumbnails:{thumbContainer:"plyr__preview-thumb",thumbContainerShown:"plyr__preview-thumb--is-shown",imageContainer:"plyr__preview-thumb__image-container",timeContainer:"plyr__preview-thumb__time-container",scrubbingContainer:"plyr__preview-scrubbing",scrubbingContainerShown:"plyr__preview-scrubbing--is-shown"}},attributes:{embed:{provider:"data-plyr-provider",id:"data-plyr-embed-id"}},ads:{enabled:!1,publisherId:"",tagUrl:""},previewThumbnails:{enabled:!1,src:""},vimeo:{byline:!1,portrait:!1,title:!1,speed:!0,transparent:!1,premium:!1,referrerPolicy:null},youtube:{noCookie:!0,rel:0,showinfo:0,iv_load_policy:3,modestbranding:1}},rt="picture-in-picture",ot={html5:"html5",youtube:"youtube",vimeo:"vimeo"},at=(e(ct,[{key:"log",get:function(){return this.enabled?Function.prototype.bind.call(console.log,console):tt}},{key:"warn",get:function(){return this.enabled?Function.prototype.bind.call(console.warn,console):tt}},{key:"error",get:function(){return this.enabled?Function.prototype.bind.call(console.error,console):tt}}]),ct),st=(e(lt,[{key:"onChange",value:function(){if(this.enabled){var e=this.player.elements.buttons.fullscreen;J(e)&&(e.pressed=this.active),Le.call(this.player,this.target,this.active?"enterfullscreen":"exitfullscreen",!0)}}},{key:"toggleFallback",value:function(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];if(e?this.scrollPosition={x:window.scrollX||0,y:window.scrollY||0}:window.scrollTo(this.scrollPosition.x,this.scrollPosition.y),document.body.style.overflow=e?"hidden":"",ge(this.target,this.player.config.classNames.fullscreen.fallback,e),re.isIos){var t=document.head.querySelector('meta[name="viewport"]'),n="viewport-fit=cover";t||(t=document.createElement("meta")).setAttribute("name","viewport");var i=X(t.content)&&t.content.includes(n);e?(this.cleanupViewport=!i,i||(t.content+=",".concat(n))):this.cleanupViewport&&(t.content=t.content.split(",").filter(function(e){return e.trim()!==n}).join(","))}this.onChange()}},{key:"trapFocus",value:function(e){if(!re.isIos&&this.active&&"Tab"===e.key&&9===e.keyCode){var t=document.activeElement,n=be.call(this.player,"a[href], button:not(:disabled), input:not(:disabled), [tabindex]"),i=k(n,1)[0],r=n[n.length-1];t!==r||e.shiftKey?t===i&&e.shiftKey&&(r.focus(),e.preventDefault()):(i.focus(),e.preventDefault())}}},{key:"update",value:function(){var e;this.enabled?(e=this.forceFallback?"Fallback (forced)":lt.native?"Native":"Fallback",this.player.debug.log("".concat(e," fullscreen enabled"))):this.player.debug.log("Fullscreen not supported and fallback disabled"),ge(this.player.elements.container,this.player.config.classNames.fullscreen.enabled,this.enabled)}},{key:"enter",value:function(){this.enabled&&(re.isIos&&this.player.config.fullscreen.iosNative?this.target.webkitEnterFullscreen():!lt.native||this.forceFallback?this.toggleFallback(!0):this.prefix?ee(this.prefix)||this.target["".concat(this.prefix,"Request").concat(this.property)]():this.target.requestFullscreen({navigationUI:"hide"}))}},{key:"exit",value:function(){if(this.enabled)if(re.isIos&&this.player.config.fullscreen.iosNative)this.target.webkitExitFullscreen(),je(this.player.play());else if(!lt.native||this.forceFallback)this.toggleFallback(!1);else if(this.prefix){if(!ee(this.prefix)){var e="moz"===this.prefix?"Cancel":"Exit";document["".concat(this.prefix).concat(e).concat(this.property)]()}}else(document.cancelFullScreen||document.exitFullscreen).call(document)}},{key:"toggle",value:function(){this.active?this.exit():this.enter()}},{key:"usingNative",get:function(){return lt.native&&!this.forceFallback}},{key:"enabled",get:function(){return(lt.native||this.player.config.fullscreen.fallback)&&this.player.config.fullscreen.enabled&&this.player.supported.ui&&this.player.isVideo}},{key:"active",get:function(){if(!this.enabled)return!1;if(!lt.native||this.forceFallback)return ye(this.target,this.player.config.classNames.fullscreen.fallback);var e=this.prefix?document["".concat(this.prefix).concat(this.property,"Element")]:document.fullscreenElement;return e&&e.shadowRoot?e===this.target.getRootNode().host:e===this.target}},{key:"target",get:function(){return re.isIos&&this.player.config.fullscreen.iosNative?this.player.media:this.player.elements.fullscreen||this.player.elements.container}}],[{key:"native",get:function(){return!!(document.fullscreenEnabled||document.webkitFullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled)}},{key:"prefix",get:function(){if(Y(document.exitFullscreen))return"";var t="";return["webkit","moz","ms"].some(function(e){return!(!Y(document["".concat(e,"ExitFullscreen")])&&!Y(document["".concat(e,"CancelFullScreen")])||(t=e,0))}),t}},{key:"property",get:function(){return"moz"===this.prefix?"FullScreen":"Fullscreen"}}]),lt);function lt(e){var t,n,i=this;c(this,lt),this.player=e,this.prefix=lt.prefix,this.property=lt.property,this.scrollPosition={x:0,y:0},this.forceFallback="force"===e.config.fullscreen.fallback,this.player.elements.fullscreen=e.config.fullscreen.container&&(t=this.player.elements.container,n=e.config.fullscreen.container,(Element.prototype.closest||function(){var e=this;do{if(ve.matches(e,n))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType);return null}).call(t,n)),Ae.call(this.player,document,"ms"===this.prefix?"MSFullscreenChange":"".concat(this.prefix,"fullscreenchange"),function(){i.onChange()}),Ae.call(this.player,this.player.elements.container,"dblclick",function(e){J(i.player.elements.controls)&&i.player.elements.controls.contains(e.target)||i.toggle()}),Ae.call(this,this.player.elements.container,"keydown",function(e){return i.trapFocus(e)}),this.update()}function ct(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0];c(this,ct),this.enabled=window.console&&e,this.enabled&&this.log("Debugging enabled")}function ut(r,e){var o=1<arguments.length&&void 0!==e?e:1;return new Promise(function(e,t){function n(){delete i.onload,delete i.onerror,(i.naturalWidth>=o?e:t)(i)}var i=new Image;Object.assign(i,{onload:n,onerror:n,src:r})})}var dt={addStyleHook:function(){ge(this.elements.container,this.config.selectors.container.replace(".",""),!0),ge(this.elements.container,this.config.classNames.uiSupported,this.supported.ui)},toggleNativeControls:function(){0<arguments.length&&void 0!==arguments[0]&&arguments[0]&&this.isHTML5?this.media.setAttribute("controls",""):this.media.removeAttribute("controls")},build:function(){var e=this;if(this.listeners.media(),!this.supported.ui)return this.debug.warn("Basic support only for ".concat(this.provider," ").concat(this.type)),void dt.toggleNativeControls.call(this,!0);J(this.elements.controls)||(Je.inject.call(this),this.listeners.controls()),dt.toggleNativeControls.call(this),this.isHTML5&&nt.setup.call(this),this.volume=null,this.muted=null,this.loop=null,this.quality=null,this.speed=null,Je.updateVolume.call(this),Je.timeUpdate.call(this),dt.checkPlaying.call(this),ge(this.elements.container,this.config.classNames.pip.supported,Ce.pip&&this.isHTML5&&this.isVideo),ge(this.elements.container,this.config.classNames.airplay.supported,Ce.airplay&&this.isHTML5),ge(this.elements.container,this.config.classNames.isIos,re.isIos),ge(this.elements.container,this.config.classNames.isTouch,this.touch),this.ready=!0,setTimeout(function(){Le.call(e,e.media,"ready")},0),dt.setTitle.call(this),this.poster&&dt.setPoster.call(this,this.poster,!1).catch(function(){}),this.config.duration&&Je.durationUpdate.call(this)},setTitle:function(){var t=We("play",this.config);if(X(this.config.title)&&!ee(this.config.title)&&(t+=", ".concat(this.config.title)),Array.from(this.elements.buttons.play||[]).forEach(function(e){e.setAttribute("aria-label",t)}),this.isEmbed){var e=we.call(this,"iframe");if(!J(e))return;var n=ee(this.config.title)?"video":this.config.title,i=We("frameTitle",this.config);e.setAttribute("title",i.replace("{title}",n))}},togglePoster:function(e){ge(this.elements.container,this.config.classNames.posterEnabled,e)},setPoster:function(t){var n=this;return(!(1<arguments.length&&void 0!==arguments[1])||arguments[1])&&this.poster?Promise.reject(new Error("Poster already set")):(this.media.setAttribute("data-poster",t),function(){var t=this;return new Promise(function(e){return t.ready?setTimeout(e,0):Ae.call(t,t.elements.container,"ready",e)}).then(function(){})}.call(this).then(function(){return ut(t)}).catch(function(e){throw t===n.poster&&dt.togglePoster.call(n,!1),e}).then(function(){if(t!==n.poster)throw new Error("setPoster cancelled by later call to setPoster")}).then(function(){return Object.assign(n.elements.poster.style,{backgroundImage:"url('".concat(t,"')"),backgroundSize:""}),dt.togglePoster.call(n,!0),t}))},checkPlaying:function(e){var t=this;ge(this.elements.container,this.config.classNames.playing,this.playing),ge(this.elements.container,this.config.classNames.paused,this.paused),ge(this.elements.container,this.config.classNames.stopped,this.stopped),Array.from(this.elements.buttons.play||[]).forEach(function(e){Object.assign(e,{pressed:t.playing}),e.setAttribute("aria-label",We(t.playing?"pause":"play",t.config))}),I(e)&&"timeupdate"===e.type||dt.toggleControls.call(this)},checkLoading:function(e){var t=this;this.loading=["stalled","waiting"].includes(e.type),clearTimeout(this.timers.loading),this.timers.loading=setTimeout(function(){ge(t.elements.container,t.config.classNames.loading,t.loading),dt.toggleControls.call(t)},this.loading?250:0)},toggleControls:function(e){var t=this.elements.controls;if(t&&this.config.hideControls){var n=this.touch&&this.lastSeekTime+2e3>Date.now();this.toggleControls(Boolean(e||this.loading||this.paused||t.pressed||t.hover||n))}},migrateStyles:function(){var t=this;Object.values(w({},this.media.style)).filter(function(e){return!ee(e)&&e.startsWith("--plyr")}).forEach(function(e){t.elements.container.style.setProperty(e,t.media.style.getPropertyValue(e)),t.media.style.removeProperty(e)}),ee(this.media.style)&&this.media.removeAttribute("style")}},ht=(e(ft,[{key:"handleKey",value:function(e){var t=this.player,n=t.elements,i=e.keyCode?e.keyCode:e.which,r="keydown"===e.type,o=r&&i===this.lastKey;if(!(e.altKey||e.ctrlKey||e.metaKey||e.shiftKey)&&K(i))if(r){var a=document.activeElement;if(J(a)){var s=t.config.selectors.editable;if(a!==n.inputs.seek&&ve(a,s))return;if(32===e.which&&ve(a,'button, [role^="menuitem"]'))return}switch([32,37,38,39,40,48,49,50,51,52,53,54,56,57,67,70,73,75,76,77,79].includes(i)&&(e.preventDefault(),e.stopPropagation()),i){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:o||(t.currentTime=t.duration/10*(i-48));break;case 32:case 75:o||je(t.togglePlay());break;case 38:t.increaseVolume(.1);break;case 40:t.decreaseVolume(.1);break;case 77:o||(t.muted=!t.muted);break;case 39:t.forward();break;case 37:t.rewind();break;case 70:t.fullscreen.toggle();break;case 67:o||t.toggleCaptions();break;case 76:t.loop=!t.loop}27===i&&!t.fullscreen.usingNative&&t.fullscreen.active&&t.fullscreen.toggle(),this.lastKey=i}else this.lastKey=null}},{key:"toggleMenu",value:function(e){Je.toggleMenu.call(this.player,e)}},{key:"firstTouch",value:function(){var e=this.player,t=e.elements;e.touch=!0,ge(t.container,e.config.classNames.isTouch,!0)}},{key:"setTabFocus",value:function(e){var t=this.player,n=t.elements;if(clearTimeout(this.focusTimer),"keydown"!==e.type||9===e.which){"keydown"===e.type&&(this.lastKeyDown=e.timeStamp);var i,r=e.timeStamp-this.lastKeyDown<=20;"focus"===e.type&&!r||(i=t.config.classNames.tabFocus,ge(be.call(t,".".concat(i)),i,!1),"focusout"!==e.type&&(this.focusTimer=setTimeout(function(){var e=document.activeElement;n.container.contains(e)&&ge(document.activeElement,t.config.classNames.tabFocus,!0)},10)))}}},{key:"global",value:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=this.player;t.config.keyboard.global&&Se.call(t,window,"keydown keyup",this.handleKey,e,!1),Se.call(t,document.body,"click",this.toggleMenu,e),Pe.call(t,document.body,"touchstart",this.firstTouch),Se.call(t,document.body,"keydown focus blur focusout",this.setTabFocus,e,!1,!0)}},{key:"container",value:function(){var s=this.player,e=s.config,a=s.elements,i=s.timers;function l(e){if(!e)return Ie.call(s);var t=a.container.getBoundingClientRect(),n=t.width,i=t.height;return Ie.call(s,"".concat(n,":").concat(i))}function c(){clearTimeout(i.resized),i.resized=setTimeout(l,50)}!e.keyboard.global&&e.keyboard.focused&&Ae.call(s,a.container,"keydown keyup",this.handleKey,!1),Ae.call(s,a.container,"mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen",function(e){var t=a.controls;t&&"enterfullscreen"===e.type&&(t.pressed=!1,t.hover=!1);var n=0;["touchstart","touchmove","mousemove"].includes(e.type)&&(dt.toggleControls.call(s,!0),n=s.touch?3e3:2e3),clearTimeout(i.controls),i.controls=setTimeout(function(){return dt.toggleControls.call(s,!1)},n)}),Ae.call(s,a.container,"enterfullscreen exitfullscreen",function(e){var t=s.fullscreen,n=t.target,i=t.usingNative;if(n===a.container&&(s.isEmbed||!ee(s.config.ratio))){var r="enterfullscreen"===e.type,o=l(r);o.padding,function(e,t){if(s.isVimeo&&!s.config.vimeo.premium){var n=s.elements.wrapper.firstChild,i=k(e,2)[1],r=k(Oe.call(s),2),o=r[0],a=r[1];n.style.maxWidth=t?"".concat(i/a*o,"px"):null,n.style.margin=t?"0 auto":null}}(o.ratio,r),i||(r?Ae.call(s,window,"resize",c):Ne.call(s,window,"resize",c))}})}},{key:"media",value:function(){var t=this,i=this.player,r=i.elements;if(Ae.call(i,i.media,"timeupdate seeking seeked",function(e){return Je.timeUpdate.call(i,e)}),Ae.call(i,i.media,"durationchange loadeddata loadedmetadata",function(e){return Je.durationUpdate.call(i,e)}),Ae.call(i,i.media,"ended",function(){i.isHTML5&&i.isVideo&&i.config.resetOnEnd&&(i.restart(),i.pause())}),Ae.call(i,i.media,"progress playing seeking seeked",function(e){return Je.updateProgress.call(i,e)}),Ae.call(i,i.media,"volumechange",function(e){return Je.updateVolume.call(i,e)}),Ae.call(i,i.media,"playing play pause ended emptied timeupdate",function(e){return dt.checkPlaying.call(i,e)}),Ae.call(i,i.media,"waiting canplay seeked playing",function(e){return dt.checkLoading.call(i,e)}),i.supported.ui&&i.config.clickToPlay&&!i.isAudio){var n=we.call(i,".".concat(i.config.classNames.video));if(!J(n))return;Ae.call(i,r.container,"click",function(e){([r.container,n].includes(e.target)||n.contains(e.target))&&(i.touch&&i.config.hideControls||(i.ended?(t.proxy(e,i.restart,"restart"),t.proxy(e,function(){je(i.play())},"play")):t.proxy(e,function(){je(i.togglePlay())},"play")))})}i.supported.ui&&i.config.disableContextMenu&&Ae.call(i,r.wrapper,"contextmenu",function(e){e.preventDefault()},!1),Ae.call(i,i.media,"volumechange",function(){i.storage.set({volume:i.volume,muted:i.muted})}),Ae.call(i,i.media,"ratechange",function(){Je.updateSetting.call(i,"speed"),i.storage.set({speed:i.speed})}),Ae.call(i,i.media,"qualitychange",function(e){Je.updateSetting.call(i,"quality",null,e.detail.quality)}),Ae.call(i,i.media,"ready qualitychange",function(){Je.setDownloadUrl.call(i)});var e=i.config.events.concat(["keyup","keydown"]).join(" ");Ae.call(i,i.media,e,function(e){var t=e.detail,n=void 0===t?{}:t;"error"===e.type&&(n=i.media.error),Le.call(i,r.container,e.type,!0,n)})}},{key:"proxy",value:function(e,t,n){var i=this.player,r=i.config.listeners[n],o=!0;Y(r)&&(o=r.call(i,e)),!1!==o&&Y(t)&&t.call(i,e)}},{key:"bind",value:function(e,t,n,i){var r=this,o=!(4<arguments.length&&void 0!==arguments[4])||arguments[4],a=this.player,s=a.config.listeners[i],l=Y(s);Ae.call(a,e,t,function(e){return r.proxy(e,n,i)},o&&!l)}},{key:"controls",value:function(){var i=this,s=this.player,r=s.elements,t=re.isIE?"change":"input";if(r.buttons.play&&Array.from(r.buttons.play).forEach(function(e){i.bind(e,"click",function(){je(s.togglePlay())},"play")}),this.bind(r.buttons.restart,"click",s.restart,"restart"),this.bind(r.buttons.rewind,"click",s.rewind,"rewind"),this.bind(r.buttons.fastForward,"click",s.forward,"fastForward"),this.bind(r.buttons.mute,"click",function(){s.muted=!s.muted},"mute"),this.bind(r.buttons.captions,"click",function(){return s.toggleCaptions()}),this.bind(r.buttons.download,"click",function(){Le.call(s,s.media,"download")},"download"),this.bind(r.buttons.fullscreen,"click",function(){s.fullscreen.toggle()},"fullscreen"),this.bind(r.buttons.pip,"click",function(){s.pip="toggle"},"pip"),this.bind(r.buttons.airplay,"click",s.airplay,"airplay"),this.bind(r.buttons.settings,"click",function(e){e.stopPropagation(),e.preventDefault(),Je.toggleMenu.call(s,e)},null,!1),this.bind(r.buttons.settings,"keyup",function(e){var t=e.which;[13,32].includes(t)&&(13!==t?(e.preventDefault(),e.stopPropagation(),Je.toggleMenu.call(s,e)):Je.focusFirstMenuItem.call(s,null,!0))},null,!1),this.bind(r.settings.menu,"keydown",function(e){27===e.which&&Je.toggleMenu.call(s,e)}),this.bind(r.inputs.seek,"mousedown mousemove",function(e){var t=r.progress.getBoundingClientRect(),n=100/t.width*(e.pageX-t.left);e.currentTarget.setAttribute("seek-value",n)}),this.bind(r.inputs.seek,"mousedown mouseup keydown keyup touchstart touchend",function(e){var t=e.currentTarget,n=e.keyCode?e.keyCode:e.which;if(!q(e)||39===n||37===n){s.lastSeekTime=Date.now();var i=t.hasAttribute("play-on-seeked"),r=["mouseup","touchend","keyup"].includes(e.type);i&&r?(t.removeAttribute("play-on-seeked"),je(s.play())):!r&&s.playing&&(t.setAttribute("play-on-seeked",""),s.pause())}}),re.isIos){var e=be.call(s,'input[type="range"]');Array.from(e).forEach(function(e){return i.bind(e,t,function(e){return ie(e.target)})})}this.bind(r.inputs.seek,t,function(e){var t=e.currentTarget,n=t.getAttribute("seek-value");ee(n)&&(n=t.value),t.removeAttribute("seek-value"),s.currentTime=n/t.max*s.duration},"seek"),this.bind(r.progress,"mouseenter mouseleave mousemove",function(e){return Je.updateSeekTooltip.call(s,e)}),this.bind(r.progress,"mousemove touchmove",function(e){var t=s.previewThumbnails;t&&t.loaded&&t.startMove(e)}),this.bind(r.progress,"mouseleave touchend click",function(){var e=s.previewThumbnails;e&&e.loaded&&e.endMove(!1,!0)}),this.bind(r.progress,"mousedown touchstart",function(e){var t=s.previewThumbnails;t&&t.loaded&&t.startScrubbing(e)}),this.bind(r.progress,"mouseup touchend",function(e){var t=s.previewThumbnails;t&&t.loaded&&t.endScrubbing(e)}),re.isWebkit&&Array.from(be.call(s,'input[type="range"]')).forEach(function(e){i.bind(e,"input",function(e){return Je.updateRangeFill.call(s,e.target)})}),s.config.toggleInvert&&!J(r.display.duration)&&this.bind(r.display.currentTime,"click",function(){0!==s.currentTime&&(s.config.invertTime=!s.config.invertTime,Je.timeUpdate.call(s))}),this.bind(r.inputs.volume,t,function(e){s.volume=e.target.value},"volume"),this.bind(r.controls,"mouseenter mouseleave",function(e){r.controls.hover=!s.touch&&"mouseenter"===e.type}),r.fullscreen&&Array.from(r.fullscreen.children).filter(function(e){return!e.contains(r.container)}).forEach(function(e){i.bind(e,"mouseenter mouseleave",function(e){r.controls.hover=!s.touch&&"mouseenter"===e.type})}),this.bind(r.controls,"mousedown mouseup touchstart touchend touchcancel",function(e){r.controls.pressed=["mousedown","touchstart"].includes(e.type)}),this.bind(r.controls,"focusin",function(){var e=s.config,t=s.timers;ge(r.controls,e.classNames.noTransition,!0),dt.toggleControls.call(s,!0),setTimeout(function(){ge(r.controls,e.classNames.noTransition,!1)},0);var n=i.touch?3e3:4e3;clearTimeout(t.controls),t.controls=setTimeout(function(){return dt.toggleControls.call(s,!1)},n)}),this.bind(r.inputs.volume,"wheel",function(e){var t=e.webkitDirectionInvertedFromDevice,n=k([e.deltaX,-e.deltaY].map(function(e){return t?-e:e}),2),i=n[0],r=n[1],o=Math.sign(Math.abs(i)>Math.abs(r)?i:r);s.increaseVolume(o/50);var a=s.media.volume;(1===o&&a<1||-1===o&&0<a)&&e.preventDefault()},"volume",!1)}}]),ft);function ft(e){c(this,ft),this.player=e,this.lastKey=null,this.focusTimer=null,this.lastKeyDown=null,this.handleKey=this.handleKey.bind(this),this.toggleMenu=this.toggleMenu.bind(this),this.setTabFocus=this.setTabFocus.bind(this),this.firstTouch=this.firstTouch.bind(this)}var pt,mt=((pt={exports:{}}).exports=function(){var h=function(){},r={},l={},c={};function d(e,t){if(e){var n=c[e];if(l[e]=t,n)for(;n.length;)n[0](e,t),n.splice(0,1)}}function f(e,t){e.call&&(e={success:e}),t.length?(e.error||h)(t):(e.success||h)(e)}function p(n,i,r,o){var a,s,e=document,t=r.async,l=(r.numRetries||0)+1,c=r.before||h,u=n.replace(/[\?|#].*$/,""),d=n.replace(/^(css|img)!/,"");o=o||0,/(^css!|\.css$)/.test(u)?((s=e.createElement("link")).rel="stylesheet",s.href=d,(a="hideFocus"in s)&&s.relList&&(a=0,s.rel="preload",s.as="style")):/(^img!|\.(png|gif|jpg|svg|webp)$)/.test(u)?(s=e.createElement("img")).src=d:((s=e.createElement("script")).src=n,s.async=void 0===t||t),!(s.onload=s.onerror=s.onbeforeload=function(e){var t=e.type[0];if(a)try{s.sheet.cssText.length||(t="e")}catch(e){18!=e.code&&(t="e")}if("e"==t){if((o+=1)<l)return p(n,i,r,o)}else if("preload"==s.rel&&"style"==s.as)return s.rel="stylesheet";i(n,t,e.defaultPrevented)})!==c(n,s)&&e.head.appendChild(s)}function t(e,t,n){var c,u;if(t&&t.trim&&(c=t),u=(c?n:t)||{},c){if(c in r)throw"LoadJS";r[c]=!0}function i(s,l){!function(e,t){var n,i,r=(e=e.push?e:[e]).length,o=r,a=[];for(n=function(e,t,n){if("e"==t&&a.push(e),"b"==t){if(!n)return;a.push(e)}var i;--r||(f(u,i=a),s&&f({success:s,error:l},i),d(c,i))},i=0;i<o;i++)p(e[i],n,t)}(e,u)}if(u.returnPromise)return new Promise(i);i()}return t.ready=function(e,s){return function(e){e=e.push?e:[e];var t,n,i,r=[],o=e.length,a=o;for(t=function(e,t){t.length&&r.push(e),--a||f(s,r)};o--;)n=e[o],(i=l[n])?t(n,i):(c[n]=c[n]||[]).push(t)}(e),t},t.done=function(e){d(e,[])},t.reset=function(){r={},l={},c={}},t.isDefined=function(e){return e in r},t}(),pt.exports);function gt(n){return new Promise(function(e,t){mt(n,{success:e,error:t})})}function yt(e){e&&!this.embed.hasPlayed&&(this.embed.hasPlayed=!0),this.media.paused===e&&(this.media.paused=!e,Le.call(this,this.media,e?"play":"pause"))}var vt={setup:function(){var t=this;ge(t.elements.wrapper,t.config.classNames.embed,!0),t.options.speed=t.config.speed.options,Ie.call(t),$(window.Vimeo)?vt.ready.call(t):gt(t.config.urls.vimeo.sdk).then(function(){vt.ready.call(t)}).catch(function(e){t.debug.warn("Vimeo SDK (player.js) failed to load",e)})},ready:function(){var r=this,a=this,e=a.config.vimeo,t=e.premium,n=e.referrerPolicy,i=function(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],0<=t.indexOf(n)||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}(e,["premium","referrerPolicy"]);t&&Object.assign(i,{controls:!1,sidedock:!1});var o=et(w({loop:a.config.loop.active,autoplay:a.autoplay,muted:a.muted,gesture:"media",playsinline:!this.config.fullscreen.iosNative},i)),s=a.media.getAttribute("src");ee(s)&&(s=a.media.getAttribute(a.config.attributes.embed.id));var l,c=ee(l=s)?null:K(Number(l))?l:l.match(/^.*(vimeo.com\/|video\/)(\d+).*/)?RegExp.$2:l,u=ce("iframe"),d=_e(a.config.urls.vimeo.iframe,c,o);u.setAttribute("src",d),u.setAttribute("allowfullscreen",""),u.setAttribute("allow","autoplay,fullscreen,picture-in-picture"),ee(n)||u.setAttribute("referrerPolicy",n);var h=a.poster;if(t)u.setAttribute("data-poster",h),a.media=fe(u,a.media);else{var f=ce("div",{class:a.config.classNames.embedContainer,"data-poster":h});f.appendChild(u),a.media=fe(f,a.media)}$e(_e(a.config.urls.vimeo.api,c),"json").then(function(e){if(!ee(e)){var t=new URL(e[0].thumbnail_large);t.pathname="".concat(t.pathname.split("_")[0],".jpg"),dt.setPoster.call(a,t.href).catch(function(){})}}),a.embed=new window.Vimeo.Player(u,{autopause:a.config.autopause,muted:a.muted}),a.media.paused=!0,a.media.currentTime=0,a.supported.ui&&a.embed.disableTextTrack(),a.media.play=function(){return yt.call(a,!0),a.embed.play()},a.media.pause=function(){return yt.call(a,!1),a.embed.pause()},a.media.stop=function(){a.pause(),a.currentTime=0};var p=a.media.currentTime;Object.defineProperty(a.media,"currentTime",{get:function(){return p},set:function(e){var t=a.embed,n=a.media,i=a.paused,r=a.volume,o=i&&!t.hasPlayed;n.seeking=!0,Le.call(a,n,"seeking"),Promise.resolve(o&&t.setVolume(0)).then(function(){return t.setCurrentTime(e)}).then(function(){return o&&t.pause()}).then(function(){return o&&t.setVolume(r)}).catch(function(){})}});var m=a.config.speed.selected;Object.defineProperty(a.media,"playbackRate",{get:function(){return m},set:function(e){a.embed.setPlaybackRate(e).then(function(){m=e,Le.call(a,a.media,"ratechange")}).catch(function(){a.options.speed=[1]})}});var g=a.config.volume;Object.defineProperty(a.media,"volume",{get:function(){return g},set:function(e){a.embed.setVolume(e).then(function(){g=e,Le.call(a,a.media,"volumechange")})}});var y=a.config.muted;Object.defineProperty(a.media,"muted",{get:function(){return y},set:function(e){var t=!!O(e)&&e;a.embed.setVolume(t?0:a.config.volume).then(function(){y=t,Le.call(a,a.media,"volumechange")})}});var v,b=a.config.loop;Object.defineProperty(a.media,"loop",{get:function(){return b},set:function(e){var t=O(e)?e:a.config.loop.active;a.embed.setLoop(t).then(function(){b=t})}}),a.embed.getVideoUrl().then(function(e){v=e,Je.setDownloadUrl.call(a)}).catch(function(e){r.debug.warn(e)}),Object.defineProperty(a.media,"currentSrc",{get:function(){return v}}),Object.defineProperty(a.media,"ended",{get:function(){return a.currentTime===a.duration}}),Promise.all([a.embed.getVideoWidth(),a.embed.getVideoHeight()]).then(function(e){var t=k(e,2),n=t[0],i=t[1];a.embed.ratio=[n,i],Ie.call(r)}),a.embed.setAutopause(a.config.autopause).then(function(e){a.config.autopause=e}),a.embed.getVideoTitle().then(function(e){a.config.title=e,dt.setTitle.call(r)}),a.embed.getCurrentTime().then(function(e){p=e,Le.call(a,a.media,"timeupdate")}),a.embed.getDuration().then(function(e){a.media.duration=e,Le.call(a,a.media,"durationchange")}),a.embed.getTextTracks().then(function(e){a.media.textTracks=e,nt.setup.call(a)}),a.embed.on("cuechange",function(e){var t=e.cues,n=(void 0===t?[]:t).map(function(e){return t=e.text,n=document.createDocumentFragment(),i=document.createElement("div"),n.appendChild(i),i.innerHTML=t,n.firstChild.innerText;var t,n,i});nt.updateCues.call(a,n)}),a.embed.on("loaded",function(){a.embed.getPaused().then(function(e){yt.call(a,!e),e||Le.call(a,a.media,"playing")}),J(a.embed.element)&&a.supported.ui&&a.embed.element.setAttribute("tabindex",-1)}),a.embed.on("bufferstart",function(){Le.call(a,a.media,"waiting")}),a.embed.on("bufferend",function(){Le.call(a,a.media,"playing")}),a.embed.on("play",function(){yt.call(a,!0),Le.call(a,a.media,"playing")}),a.embed.on("pause",function(){yt.call(a,!1)}),a.embed.on("timeupdate",function(e){a.media.seeking=!1,p=e.seconds,Le.call(a,a.media,"timeupdate")}),a.embed.on("progress",function(e){a.media.buffered=e.percent,Le.call(a,a.media,"progress"),1===parseInt(e.percent,10)&&Le.call(a,a.media,"canplaythrough"),a.embed.getDuration().then(function(e){e!==a.media.duration&&(a.media.duration=e,Le.call(a,a.media,"durationchange"))})}),a.embed.on("seeked",function(){a.media.seeking=!1,Le.call(a,a.media,"seeked")}),a.embed.on("ended",function(){a.media.paused=!0,Le.call(a,a.media,"ended")}),a.embed.on("error",function(e){a.media.error=e,Le.call(a,a.media,"error")}),setTimeout(function(){return dt.build.call(a)},0)}};function bt(e){e&&!this.embed.hasPlayed&&(this.embed.hasPlayed=!0),this.media.paused===e&&(this.media.paused=!e,Le.call(this,this.media,e?"play":"pause"))}function wt(e,t){var n={};return e>t.width/t.height?(n.width=t.width,n.height=1/e*t.width):(n.height=t.height,n.width=e*t.height),n}var kt={setup:function(){var t=this;if(ge(this.elements.wrapper,this.config.classNames.embed,!0),$(window.YT)&&Y(window.YT.Player))kt.ready.call(this);else{var e=window.onYouTubeIframeAPIReady;window.onYouTubeIframeAPIReady=function(){Y(e)&&e(),kt.ready.call(t)},gt(this.config.urls.youtube.sdk).catch(function(e){t.debug.warn("YouTube API failed to load",e)})}},getTitle:function(e){var r=this;$e(_e(this.config.urls.youtube.api,e)).then(function(e){if($(e)){var t=e.title,n=e.height,i=e.width;r.config.title=t,dt.setTitle.call(r),r.embed.ratio=[i,n]}Ie.call(r)}).catch(function(){Ie.call(r)})},ready:function(){var o=this,e=o.media&&o.media.getAttribute("id");if(ee(e)||!e.startsWith("youtube-")){var t=o.media.getAttribute("src");ee(t)&&(t=o.media.getAttribute(this.config.attributes.embed.id));var n,i,a=ee(n=t)?null:n.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/)?RegExp.$2:n,r=(i=o.provider,"".concat(i,"-").concat(Math.floor(1e4*Math.random()))),s=ce("div",{id:r,"data-poster":o.poster});o.media=fe(s,o.media);var l=function(e){return"https://i.ytimg.com/vi/".concat(a,"/").concat(e,"default.jpg")};ut(l("maxres"),121).catch(function(){return ut(l("sd"),121)}).catch(function(){return ut(l("hq"))}).then(function(e){return dt.setPoster.call(o,e.src)}).then(function(e){e.includes("maxres")||(o.elements.poster.style.backgroundSize="cover")}).catch(function(){});var c=o.config.youtube;o.embed=new window.YT.Player(r,{videoId:a,host:c.noCookie?"https://www.youtube-nocookie.com":"http:"===window.location.protocol?"http://www.youtube.com":void 0,playerVars:ae({},{autoplay:o.config.autoplay?1:0,hl:o.config.hl,controls:o.supported.ui?0:1,disablekb:1,playsinline:o.config.fullscreen.iosNative?0:1,cc_load_policy:o.captions.active?1:0,cc_lang_pref:o.config.captions.language,widget_referrer:window?window.location.href:null},c),events:{onError:function(e){if(!o.media.error){var t=e.data,n={2:"The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.",5:"The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.",100:"The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.",101:"The owner of the requested video does not allow it to be played in embedded players.",150:"The owner of the requested video does not allow it to be played in embedded players."}[t]||"An unknown error occured";o.media.error={code:t,message:n},Le.call(o,o.media,"error")}},onPlaybackRateChange:function(e){var t=e.target;o.media.playbackRate=t.getPlaybackRate(),Le.call(o,o.media,"ratechange")},onReady:function(e){if(!Y(o.media.play)){var n=e.target;kt.getTitle.call(o,a),o.media.play=function(){bt.call(o,!0),n.playVideo()},o.media.pause=function(){bt.call(o,!1),n.pauseVideo()},o.media.stop=function(){n.stopVideo()},o.media.duration=n.getDuration(),o.media.paused=!0,o.media.currentTime=0,Object.defineProperty(o.media,"currentTime",{get:function(){return Number(n.getCurrentTime())},set:function(e){o.paused&&!o.embed.hasPlayed&&o.embed.mute(),o.media.seeking=!0,Le.call(o,o.media,"seeking"),n.seekTo(e)}}),Object.defineProperty(o.media,"playbackRate",{get:function(){return n.getPlaybackRate()},set:function(e){n.setPlaybackRate(e)}});var t=o.config.volume;Object.defineProperty(o.media,"volume",{get:function(){return t},set:function(e){t=e,n.setVolume(100*t),Le.call(o,o.media,"volumechange")}});var i=o.config.muted;Object.defineProperty(o.media,"muted",{get:function(){return i},set:function(e){var t=O(e)?e:i;n[(i=t)?"mute":"unMute"](),Le.call(o,o.media,"volumechange")}}),Object.defineProperty(o.media,"currentSrc",{get:function(){return n.getVideoUrl()}}),Object.defineProperty(o.media,"ended",{get:function(){return o.currentTime===o.duration}});var r=n.getAvailablePlaybackRates();o.options.speed=r.filter(function(e){return o.config.speed.options.includes(e)}),o.supported.ui&&o.media.setAttribute("tabindex",-1),Le.call(o,o.media,"timeupdate"),Le.call(o,o.media,"durationchange"),clearInterval(o.timers.buffering),o.timers.buffering=setInterval(function(){o.media.buffered=n.getVideoLoadedFraction(),(null===o.media.lastBuffered||o.media.lastBuffered<o.media.buffered)&&Le.call(o,o.media,"progress"),o.media.lastBuffered=o.media.buffered,1===o.media.buffered&&(clearInterval(o.timers.buffering),Le.call(o,o.media,"canplaythrough"))},200),setTimeout(function(){return dt.build.call(o)},50)}},onStateChange:function(e){var t=e.target;switch(clearInterval(o.timers.playing),o.media.seeking&&[1,2].includes(e.data)&&(o.media.seeking=!1,Le.call(o,o.media,"seeked")),e.data){case-1:Le.call(o,o.media,"timeupdate"),o.media.buffered=t.getVideoLoadedFraction(),Le.call(o,o.media,"progress");break;case 0:bt.call(o,!1),o.media.loop?(t.stopVideo(),t.playVideo()):Le.call(o,o.media,"ended");break;case 1:o.config.autoplay||!o.media.paused||o.embed.hasPlayed?(bt.call(o,!0),Le.call(o,o.media,"playing"),o.timers.playing=setInterval(function(){Le.call(o,o.media,"timeupdate")},50),o.media.duration!==t.getDuration()&&(o.media.duration=t.getDuration(),Le.call(o,o.media,"durationchange"))):o.media.pause();break;case 2:o.muted||o.embed.unMute(),bt.call(o,!1);break;case 3:Le.call(o,o.media,"waiting")}Le.call(o,o.elements.container,"statechange",!1,{code:e.data})}}})}}},Tt={setup:function(){this.media?(ge(this.elements.container,this.config.classNames.type.replace("{0}",this.type),!0),ge(this.elements.container,this.config.classNames.provider.replace("{0}",this.provider),!0),this.isEmbed&&ge(this.elements.container,this.config.classNames.type.replace("{0}","video"),!0),this.isVideo&&(this.elements.wrapper=ce("div",{class:this.config.classNames.video}),se(this.media,this.elements.wrapper),this.elements.poster=ce("div",{class:this.config.classNames.poster}),this.elements.wrapper.appendChild(this.elements.poster)),this.isHTML5?qe.setup.call(this):this.isYouTube?kt.setup.call(this):this.isVimeo&&vt.setup.call(this)):this.debug.warn("No media element found!")}},xt=(e(At,[{key:"load",value:function(){var e=this;this.enabled&&($(window.google)&&$(window.google.ima)?this.ready():gt(this.player.config.urls.googleIMA.sdk).then(function(){e.ready()}).catch(function(){e.trigger("error",new Error("Google IMA SDK failed to load"))}))}},{key:"ready",value:function(){var e=this;this.enabled||(this.manager&&this.manager.destroy(),this.elements.displayContainer&&this.elements.displayContainer.destroy(),this.elements.container.remove()),this.startSafetyTimer(12e3,"ready()"),this.managerPromise.then(function(){e.clearSafetyTimer("onAdsManagerLoaded()")}),this.listeners(),this.setupIMA()}},{key:"setupIMA",value:function(){var t=this;this.elements.container=ce("div",{class:this.player.config.classNames.ads}),this.player.elements.container.appendChild(this.elements.container),google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED),google.ima.settings.setLocale(this.player.config.ads.language),google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline),this.elements.displayContainer=new google.ima.AdDisplayContainer(this.elements.container,this.player.media),this.loader=new google.ima.AdsLoader(this.elements.displayContainer),this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,function(e){return t.onAdsManagerLoaded(e)},!1),this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(e){return t.onAdError(e)},!1),this.requestAds()}},{key:"requestAds",value:function(){var e=this.player.elements.container;try{var t=new google.ima.AdsRequest;t.adTagUrl=this.tagUrl,t.linearAdSlotWidth=e.offsetWidth,t.linearAdSlotHeight=e.offsetHeight,t.nonLinearAdSlotWidth=e.offsetWidth,t.nonLinearAdSlotHeight=e.offsetHeight,t.forceNonLinearFullSlot=!1,t.setAdWillPlayMuted(!this.player.muted),this.loader.requestAds(t)}catch(e){this.onAdError(e)}}},{key:"pollCountdown",value:function(){var n=this;if(!(0<arguments.length&&void 0!==arguments[0]&&arguments[0]))return clearInterval(this.countdownTimer),void this.elements.container.removeAttribute("data-badge-text");this.countdownTimer=setInterval(function(){var e=Ge(Math.max(n.manager.getRemainingTime(),0)),t="".concat(We("advertisement",n.player.config)," - ").concat(e);n.elements.container.setAttribute("data-badge-text",t)},100)}},{key:"onAdsManagerLoaded",value:function(e){var t=this;if(this.enabled){var n=new google.ima.AdsRenderingSettings;n.restoreCustomPlaybackStateOnAdBreakComplete=!0,n.enablePreloading=!0,this.manager=e.getAdsManager(this.player,n),this.cuePoints=this.manager.getCuePoints(),this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(e){return t.onAdError(e)}),Object.keys(google.ima.AdEvent.Type).forEach(function(e){t.manager.addEventListener(google.ima.AdEvent.Type[e],function(e){return t.onAdEvent(e)})}),this.trigger("loaded")}}},{key:"addCuePoints",value:function(){var r=this;ee(this.cuePoints)||this.cuePoints.forEach(function(e){if(0!==e&&-1!==e&&e<r.player.duration){var t=r.player.elements.progress;if(J(t)){var n=100/r.player.duration*e,i=ce("span",{class:r.player.config.classNames.cues});i.style.left="".concat(n.toString(),"%"),t.appendChild(i)}}})}},{key:"onAdEvent",value:function(e){var t,n=this,i=this.player.elements.container,r=e.getAd(),o=e.getAdData();switch(t=e.type,Le.call(n.player,n.player.media,"ads".concat(t.replace(/_/g,"").toLowerCase())),e.type){case google.ima.AdEvent.Type.LOADED:this.trigger("loaded"),this.pollCountdown(!0),r.isLinear()||(r.width=i.offsetWidth,r.height=i.offsetHeight);break;case google.ima.AdEvent.Type.STARTED:this.manager.setVolume(this.player.volume);break;case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:this.player.ended?this.loadAds():this.loader.contentComplete();break;case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:this.pauseContent();break;case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:this.pollCountdown(),this.resumeContent();break;case google.ima.AdEvent.Type.LOG:o.adError&&this.player.debug.warn("Non-fatal ad error: ".concat(o.adError.getMessage()))}}},{key:"onAdError",value:function(e){this.cancel(),this.player.debug.warn("Ads error",e)}},{key:"listeners",value:function(){var i,r=this,e=this.player.elements.container;this.player.on("canplay",function(){r.addCuePoints()}),this.player.on("ended",function(){r.loader.contentComplete()}),this.player.on("timeupdate",function(){i=r.player.currentTime}),this.player.on("seeked",function(){var n=r.player.currentTime;ee(r.cuePoints)||r.cuePoints.forEach(function(e,t){i<e&&e<n&&(r.manager.discardAdBreak(),r.cuePoints.splice(t,1))})}),window.addEventListener("resize",function(){r.manager&&r.manager.resize(e.offsetWidth,e.offsetHeight,google.ima.ViewMode.NORMAL)})}},{key:"play",value:function(){var t=this,e=this.player.elements.container;this.managerPromise||this.resumeContent(),this.managerPromise.then(function(){t.manager.setVolume(t.player.volume),t.elements.displayContainer.initialize();try{t.initialized||(t.manager.init(e.offsetWidth,e.offsetHeight,google.ima.ViewMode.NORMAL),t.manager.start()),t.initialized=!0}catch(e){t.onAdError(e)}}).catch(function(){})}},{key:"resumeContent",value:function(){this.elements.container.style.zIndex="",this.playing=!1,je(this.player.media.play())}},{key:"pauseContent",value:function(){this.elements.container.style.zIndex=3,this.playing=!0,this.player.media.pause()}},{key:"cancel",value:function(){this.initialized&&this.resumeContent(),this.trigger("error"),this.loadAds()}},{key:"loadAds",value:function(){var t=this;this.managerPromise.then(function(){t.manager&&t.manager.destroy(),t.managerPromise=new Promise(function(e){t.on("loaded",e),t.player.debug.log(t.manager)}),t.initialized=!1,t.requestAds()}).catch(function(){})}},{key:"trigger",value:function(e){for(var t=this,n=arguments.length,i=new Array(1<n?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o=this.events[e];Q(o)&&o.forEach(function(e){Y(e)&&e.apply(t,i)})}},{key:"on",value:function(e,t){return Q(this.events[e])||(this.events[e]=[]),this.events[e].push(t),this}},{key:"startSafetyTimer",value:function(e,t){var n=this;this.player.debug.log("Safety timer invoked from: ".concat(t)),this.safetyTimer=setTimeout(function(){n.cancel(),n.clearSafetyTimer("startSafetyTimer()")},e)}},{key:"clearSafetyTimer",value:function(e){U(this.safetyTimer)||(this.player.debug.log("Safety timer cleared from: ".concat(e)),clearTimeout(this.safetyTimer),this.safetyTimer=null)}},{key:"enabled",get:function(){var e=this.config;return this.player.isHTML5&&this.player.isVideo&&e.enabled&&(!ee(e.publisherId)||_(e.tagUrl))}},{key:"tagUrl",get:function(){var e=this.config;if(_(e.tagUrl))return e.tagUrl;var t={AV_PUBLISHERID:"58c25bb0073ef448b1087ad6",AV_CHANNELID:"5a0458dc28a06145e4519d21",AV_URL:window.location.hostname,cb:Date.now(),AV_WIDTH:640,AV_HEIGHT:480,AV_CDIM2:e.publisherId};return"".concat("https://go.aniview.com/api/adserver6/vast/","?").concat(et(t))}}]),At),Ct=(e(St,[{key:"load",value:function(){var e=this;this.player.elements.display.seekTooltip&&(this.player.elements.display.seekTooltip.hidden=this.enabled),this.enabled&&this.getThumbnails().then(function(){e.enabled&&(e.render(),e.determineContainerAutoSizing(),e.loaded=!0)})}},{key:"getThumbnails",value:function(){var r=this;return new Promise(function(e){var t=r.player.config.previewThumbnails.src;if(ee(t))throw new Error("Missing previewThumbnails.src config attribute");function n(){r.thumbnails.sort(function(e,t){return e.height-t.height}),r.player.debug.log("Preview thumbnails",r.thumbnails),e()}if(Y(t))t(function(e){r.thumbnails=e,n()});else{var i=(X(t)?[t]:t).map(function(e){return r.getThumbnail(e)});Promise.all(i).then(n)}})}},{key:"getThumbnail",value:function(o){var a=this;return new Promise(function(r){$e(o).then(function(e){var t,n={frames:(t=[],e.split(/\r\n\r\n|\n\n|\r\r/).forEach(function(e){var o={};e.split(/\r\n|\n|\r/).forEach(function(e){if(K(o.startTime)){if(!ee(e.trim())&&ee(o.text)){var t=e.trim().split("#xywh="),n=k(t,1);if(o.text=n[0],t[1]){var i=k(t[1].split(","),4);o.x=i[0],o.y=i[1],o.w=i[2],o.h=i[3]}}}else{var r=e.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/);r&&(o.startTime=60*Number(r[1]||0)*60+60*Number(r[2])+Number(r[3])+Number("0.".concat(r[4])),o.endTime=60*Number(r[6]||0)*60+60*Number(r[7])+Number(r[8])+Number("0.".concat(r[9])))}}),o.text&&t.push(o)}),t),height:null,urlPrefix:""};n.frames[0].text.startsWith("/")||n.frames[0].text.startsWith("http://")||n.frames[0].text.startsWith("https://")||(n.urlPrefix=o.substring(0,o.lastIndexOf("/")+1));var i=new Image;i.onload=function(){n.height=i.naturalHeight,n.width=i.naturalWidth,a.thumbnails.push(n),r()},i.src=n.urlPrefix+n.frames[0].text})})}},{key:"startMove",value:function(e){if(this.loaded&&I(e)&&["touchmove","mousemove"].includes(e.type)&&this.player.media.duration){if("touchmove"===e.type)this.seekTime=this.player.media.duration*(this.player.elements.inputs.seek.value/100);else{var t=this.player.elements.progress.getBoundingClientRect(),n=100/t.width*(e.pageX-t.left);this.seekTime=this.player.media.duration*(n/100),this.seekTime<0&&(this.seekTime=0),this.seekTime>this.player.media.duration-1&&(this.seekTime=this.player.media.duration-1),this.mousePosX=e.pageX,this.elements.thumb.time.innerText=Ge(this.seekTime)}this.showImageAtCurrentTime()}}},{key:"endMove",value:function(){this.toggleThumbContainer(!1,!0)}},{key:"startScrubbing",value:function(e){!U(e.button)&&!1!==e.button&&0!==e.button||(this.mouseDown=!0,this.player.media.duration&&(this.toggleScrubbingContainer(!0),this.toggleThumbContainer(!1,!0),this.showImageAtCurrentTime()))}},{key:"endScrubbing",value:function(){var e=this;this.mouseDown=!1,Math.ceil(this.lastTime)===Math.ceil(this.player.media.currentTime)?this.toggleScrubbingContainer(!1):Pe.call(this.player,this.player.media,"timeupdate",function(){e.mouseDown||e.toggleScrubbingContainer(!1)})}},{key:"listeners",value:function(){var e=this;this.player.on("play",function(){e.toggleThumbContainer(!1,!0)}),this.player.on("seeked",function(){e.toggleThumbContainer(!1)}),this.player.on("timeupdate",function(){e.lastTime=e.player.media.currentTime})}},{key:"render",value:function(){this.elements.thumb.container=ce("div",{class:this.player.config.classNames.previewThumbnails.thumbContainer}),this.elements.thumb.imageContainer=ce("div",{class:this.player.config.classNames.previewThumbnails.imageContainer}),this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer);var e=ce("div",{class:this.player.config.classNames.previewThumbnails.timeContainer});this.elements.thumb.time=ce("span",{},"00:00"),e.appendChild(this.elements.thumb.time),this.elements.thumb.container.appendChild(e),J(this.player.elements.progress)&&this.player.elements.progress.appendChild(this.elements.thumb.container),this.elements.scrubbing.container=ce("div",{class:this.player.config.classNames.previewThumbnails.scrubbingContainer}),this.player.elements.wrapper.appendChild(this.elements.scrubbing.container)}},{key:"destroy",value:function(){this.elements.thumb.container&&this.elements.thumb.container.remove(),this.elements.scrubbing.container&&this.elements.scrubbing.container.remove()}},{key:"showImageAtCurrentTime",value:function(){var n=this;this.mouseDown?this.setScrubbingContainerSize():this.setThumbContainerSizeAndPos();var i=this.thumbnails[0].frames.findIndex(function(e){return n.seekTime>=e.startTime&&n.seekTime<=e.endTime}),e=0<=i,r=0;this.mouseDown||this.toggleThumbContainer(e),e&&(this.thumbnails.forEach(function(e,t){n.loadedImages.includes(e.frames[i].text)&&(r=t)}),i!==this.showingThumb&&(this.showingThumb=i,this.loadImage(r)))}},{key:"loadImage",value:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,n=this.showingThumb,i=this.thumbnails[t],r=i.urlPrefix,o=i.frames[n],a=i.frames[n].text,s=r+a;if(this.currentImageElement&&this.currentImageElement.dataset.filename===a)this.showImage(this.currentImageElement,o,t,n,a,!1),this.currentImageElement.dataset.index=n,this.removeOldImages(this.currentImageElement);else{this.loadingImage&&this.usingSprites&&(this.loadingImage.onload=null);var l=new Image;l.src=s,l.dataset.index=n,l.dataset.filename=a,this.showingThumbFilename=a,this.player.debug.log("Loading image: ".concat(s)),l.onload=function(){return e.showImage(l,o,t,n,a,!0)},this.loadingImage=l,this.removeOldImages(l)}}},{key:"showImage",value:function(e,t,n,i,r){var o=!(5<arguments.length&&void 0!==arguments[5])||arguments[5];this.player.debug.log("Showing thumb: ".concat(r,". num: ").concat(i,". qual: ").concat(n,". newimg: ").concat(o)),this.setImageSizeAndOffset(e,t),o&&(this.currentImageContainer.appendChild(e),this.currentImageElement=e,this.loadedImages.includes(r)||this.loadedImages.push(r)),this.preloadNearby(i,!0).then(this.preloadNearby(i,!1)).then(this.getHigherQuality(n,e,t,r))}},{key:"removeOldImages",value:function(i){var r=this;Array.from(this.currentImageContainer.children).forEach(function(e){if("img"===e.tagName.toLowerCase()){var t=r.usingSprites?500:1e3;if(e.dataset.index!==i.dataset.index&&!e.dataset.deleting){e.dataset.deleting=!0;var n=r.currentImageContainer;setTimeout(function(){n.removeChild(e),r.player.debug.log("Removing thumb: ".concat(e.dataset.filename))},t)}}})}},{key:"preloadNearby",value:function(t){var s=this,n=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];return new Promise(function(a){setTimeout(function(){var r=s.thumbnails[0].frames[t].text;if(s.showingThumbFilename===r){var e;e=n?s.thumbnails[0].frames.slice(t):s.thumbnails[0].frames.slice(0,t).reverse();var o=!1;e.forEach(function(e){var t=e.text;if(t!==r&&!s.loadedImages.includes(t)){o=!0,s.player.debug.log("Preloading thumb filename: ".concat(t));var n=s.thumbnails[0].urlPrefix+t,i=new Image;i.src=n,i.onload=function(){s.player.debug.log("Preloaded thumb filename: ".concat(t)),s.loadedImages.includes(t)||s.loadedImages.push(t),a()}}}),o||a()}},300)})}},{key:"getHigherQuality",value:function(e,t,n,i){var r=this;if(e<this.thumbnails.length-1){var o=t.naturalHeight;this.usingSprites&&(o=n.h),o<this.thumbContainerHeight&&setTimeout(function(){r.showingThumbFilename===i&&(r.player.debug.log("Showing higher quality thumb for: ".concat(i)),r.loadImage(e+1))},300)}}},{key:"toggleThumbContainer",value:function(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0],t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=this.player.config.classNames.previewThumbnails.thumbContainerShown;this.elements.thumb.container.classList.toggle(n,e),!e&&t&&(this.showingThumb=null,this.showingThumbFilename=null)}},{key:"toggleScrubbingContainer",value:function(){var e=0<arguments.length&&void 0!==arguments[0]&&arguments[0],t=this.player.config.classNames.previewThumbnails.scrubbingContainerShown;this.elements.scrubbing.container.classList.toggle(t,e),e||(this.showingThumb=null,this.showingThumbFilename=null)}},{key:"determineContainerAutoSizing",value:function(){(20<this.elements.thumb.imageContainer.clientHeight||20<this.elements.thumb.imageContainer.clientWidth)&&(this.sizeSpecifiedInCSS=!0)}},{key:"setThumbContainerSizeAndPos",value:function(){if(this.sizeSpecifiedInCSS){if(20<this.elements.thumb.imageContainer.clientHeight&&this.elements.thumb.imageContainer.clientWidth<20){var e=Math.floor(this.elements.thumb.imageContainer.clientHeight*this.thumbAspectRatio);this.elements.thumb.imageContainer.style.width="".concat(e,"px")}else if(this.elements.thumb.imageContainer.clientHeight<20&&20<this.elements.thumb.imageContainer.clientWidth){var t=Math.floor(this.elements.thumb.imageContainer.clientWidth/this.thumbAspectRatio);this.elements.thumb.imageContainer.style.height="".concat(t,"px")}}else{var n=Math.floor(this.thumbContainerHeight*this.thumbAspectRatio);this.elements.thumb.imageContainer.style.height="".concat(this.thumbContainerHeight,"px"),this.elements.thumb.imageContainer.style.width="".concat(n,"px")}this.setThumbContainerPos()}},{key:"setThumbContainerPos",value:function(){var e=this.player.elements.progress.getBoundingClientRect(),t=this.player.elements.container.getBoundingClientRect(),n=this.elements.thumb.container,i=t.left-e.left+10,r=t.right-e.left-n.clientWidth-10,o=this.mousePosX-e.left-n.clientWidth/2;o<i&&(o=i),r<o&&(o=r),n.style.left="".concat(o,"px")}},{key:"setScrubbingContainerSize",value:function(){var e=wt(this.thumbAspectRatio,{width:this.player.media.clientWidth,height:this.player.media.clientHeight}),t=e.width,n=e.height;this.elements.scrubbing.container.style.width="".concat(t,"px"),this.elements.scrubbing.container.style.height="".concat(n,"px")}},{key:"setImageSizeAndOffset",value:function(e,t){if(this.usingSprites){var n=this.thumbContainerHeight/t.h;e.style.height="".concat(e.naturalHeight*n,"px"),e.style.width="".concat(e.naturalWidth*n,"px"),e.style.left="-".concat(t.x*n,"px"),e.style.top="-".concat(t.y*n,"px")}}},{key:"enabled",get:function(){return this.player.isHTML5&&this.player.isVideo&&this.player.config.previewThumbnails.enabled}},{key:"currentImageContainer",get:function(){return this.mouseDown?this.elements.scrubbing.container:this.elements.thumb.imageContainer}},{key:"usingSprites",get:function(){return Object.keys(this.thumbnails[0].frames[0]).includes("w")}},{key:"thumbAspectRatio",get:function(){return this.usingSprites?this.thumbnails[0].frames[0].w/this.thumbnails[0].frames[0].h:this.thumbnails[0].width/this.thumbnails[0].height}},{key:"thumbContainerHeight",get:function(){return this.mouseDown?wt(this.thumbAspectRatio,{width:this.player.media.clientWidth,height:this.player.media.clientHeight}).height:this.sizeSpecifiedInCSS?this.elements.thumb.imageContainer.clientHeight:Math.floor(this.player.media.clientWidth/this.thumbAspectRatio/4)}},{key:"currentImageElement",get:function(){return this.mouseDown?this.currentScrubbingImageElement:this.currentThumbnailImageElement},set:function(e){this.mouseDown?this.currentScrubbingImageElement=e:this.currentThumbnailImageElement=e}}]),St),Et={insertElements:function(t,e){var n=this;X(e)?ue(t,this.media,{src:e}):Q(e)&&e.forEach(function(e){ue(t,n.media,e)})},change:function(l){var c=this;oe(l,"sources.length")?(qe.cancelRequests.call(this),this.destroy.call(this,function(){c.options.quality=[],de(c.media),c.media=null,J(c.elements.container)&&c.elements.container.removeAttribute("class");var e=l.sources,t=l.type,n=k(e,1)[0],i=n.provider,r=void 0===i?ot.html5:i,o=n.src,a="html5"===r?t:"div",s="html5"===r?{}:{src:o};Object.assign(c,{provider:r,type:t,supported:Ce.check(t,r,c.config.playsinline),media:ce(a,s)}),c.elements.container.appendChild(c.media),O(l.autoplay)&&(c.config.autoplay=l.autoplay),c.isHTML5&&(c.config.crossorigin&&c.media.setAttribute("crossorigin",""),c.config.autoplay&&c.media.setAttribute("autoplay",""),ee(l.poster)||(c.poster=l.poster),c.config.loop.active&&c.media.setAttribute("loop",""),c.config.muted&&c.media.setAttribute("muted",""),c.config.playsinline&&c.media.setAttribute("playsinline","")),dt.addStyleHook.call(c),c.isHTML5&&Et.insertElements.call(c,"source",e),c.config.title=l.title,Tt.setup.call(c),c.isHTML5&&Object.keys(l).includes("tracks")&&Et.insertElements.call(c,"track",l.tracks),(c.isHTML5||c.isEmbed&&!c.supported.ui)&&dt.build.call(c),c.isHTML5&&c.media.load(),ee(l.previewThumbnails)||(Object.assign(c.config.previewThumbnails,l.previewThumbnails),c.previewThumbnails&&c.previewThumbnails.loaded&&(c.previewThumbnails.destroy(),c.previewThumbnails=null),c.config.previewThumbnails.enabled&&(c.previewThumbnails=new Ct(c))),c.fullscreen.update()},!0)):this.debug.warn("Invalid source format")}};function St(e){c(this,St),this.player=e,this.thumbnails=[],this.loaded=!1,this.lastMouseMoveTime=Date.now(),this.mouseDown=!1,this.loadedImages=[],this.elements={thumb:{},scrubbing:{}},this.load()}function At(e){var n=this;c(this,At),this.player=e,this.config=e.config.ads,this.playing=!1,this.initialized=!1,this.elements={container:null,displayContainer:null},this.manager=null,this.loader=null,this.cuePoints=null,this.events={},this.safetyTimer=null,this.countdownTimer=null,this.managerPromise=new Promise(function(e,t){n.on("loaded",e),n.on("error",t)}),this.load()}var Nt=(e(Pt,[{key:"play",value:function(){var e=this;return Y(this.media.play)?(this.ads&&this.ads.enabled&&this.ads.managerPromise.then(function(){return e.ads.play()}).catch(function(){return je(e.media.play())}),this.media.play()):null}},{key:"pause",value:function(){return this.playing&&Y(this.media.pause)?this.media.pause():null}},{key:"togglePlay",value:function(e){return(O(e)?e:!this.playing)?this.play():this.pause()}},{key:"stop",value:function(){this.isHTML5?(this.pause(),this.restart()):Y(this.media.stop)&&this.media.stop()}},{key:"restart",value:function(){this.currentTime=0}},{key:"rewind",value:function(e){this.currentTime-=K(e)?e:this.config.seekTime}},{key:"forward",value:function(e){this.currentTime+=K(e)?e:this.config.seekTime}},{key:"increaseVolume",value:function(e){var t=this.media.muted?0:this.volume;this.volume=t+(K(e)?e:0)}},{key:"decreaseVolume",value:function(e){this.increaseVolume(-e)}},{key:"toggleCaptions",value:function(e){nt.toggle.call(this,e,!1)}},{key:"airplay",value:function(){Ce.airplay&&this.media.webkitShowPlaybackTargetPicker()}},{key:"toggleControls",value:function(e){if(!this.supported.ui||this.isAudio)return!1;var t=ye(this.elements.container,this.config.classNames.hideControls),n=void 0===e?void 0:!e,i=ge(this.elements.container,this.config.classNames.hideControls,n);if(i&&Q(this.config.controls)&&this.config.controls.includes("settings")&&!ee(this.config.settings)&&Je.toggleMenu.call(this,!1),i!==t){var r=i?"controlshidden":"controlsshown";Le.call(this,this.media,r)}return!i}},{key:"on",value:function(e,t){Ae.call(this,this.elements.container,e,t)}},{key:"once",value:function(e,t){Pe.call(this,this.elements.container,e,t)}},{key:"off",value:function(e,t){Ne(this.elements.container,e,t)}},{key:"destroy",value:function(e){var t=this,n=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(this.ready){var i=function(){document.body.style.overflow="",t.embed=null,n?(Object.keys(t.elements).length&&(de(t.elements.buttons.play),de(t.elements.captions),de(t.elements.controls),de(t.elements.wrapper),t.elements.buttons.play=null,t.elements.captions=null,t.elements.controls=null,t.elements.wrapper=null),Y(e)&&e()):(function(){this&&this.eventListeners&&(this.eventListeners.forEach(function(e){var t=e.element,n=e.type,i=e.callback,r=e.options;t.removeEventListener(n,i,r)}),this.eventListeners=[])}.call(t),fe(t.elements.original,t.elements.container),Le.call(t,t.elements.original,"destroyed",!0),Y(e)&&e.call(t.elements.original),t.ready=!1,setTimeout(function(){t.elements=null,t.media=null},200))};this.stop(),clearTimeout(this.timers.loading),clearTimeout(this.timers.controls),clearTimeout(this.timers.resized),this.isHTML5?(dt.toggleNativeControls.call(this,!0),i()):this.isYouTube?(clearInterval(this.timers.buffering),clearInterval(this.timers.playing),null!==this.embed&&Y(this.embed.destroy)&&this.embed.destroy(),i()):this.isVimeo&&(null!==this.embed&&this.embed.unload().then(i),setTimeout(i,200))}}},{key:"supports",value:function(e){return Ce.mime.call(this,e)}},{key:"isHTML5",get:function(){return this.provider===ot.html5}},{key:"isEmbed",get:function(){return this.isYouTube||this.isVimeo}},{key:"isYouTube",get:function(){return this.provider===ot.youtube}},{key:"isVimeo",get:function(){return this.provider===ot.vimeo}},{key:"isVideo",get:function(){return"video"===this.type}},{key:"isAudio",get:function(){return"audio"===this.type}},{key:"playing",get:function(){return Boolean(this.ready&&!this.paused&&!this.ended)}},{key:"paused",get:function(){return Boolean(this.media.paused)}},{key:"stopped",get:function(){return Boolean(this.paused&&0===this.currentTime)}},{key:"ended",get:function(){return Boolean(this.media.ended)}},{key:"currentTime",set:function(e){if(this.duration){var t=K(e)&&0<e;this.media.currentTime=t?Math.min(e,this.duration):0,this.debug.log("Seeking to ".concat(this.currentTime," seconds"))}},get:function(){return Number(this.media.currentTime)}},{key:"buffered",get:function(){var e=this.media.buffered;return K(e)?e:e&&e.length&&0<this.duration?e.end(0)/this.duration:0}},{key:"seeking",get:function(){return Boolean(this.media.seeking)}},{key:"duration",get:function(){var e=parseFloat(this.config.duration),t=(this.media||{}).duration,n=K(t)&&t!==1/0?t:0;return e||n}},{key:"volume",set:function(e){var t=e;X(t)&&(t=Number(t)),K(t)||(t=this.storage.get("volume")),K(t)||(t=this.config.volume),1<t&&(t=1),t<0&&(t=0),this.config.volume=t,this.media.volume=t,!ee(e)&&this.muted&&0<t&&(this.muted=!1)},get:function(){return Number(this.media.volume)}},{key:"muted",set:function(e){var t=e;O(t)||(t=this.storage.get("muted")),O(t)||(t=this.config.muted),this.config.muted=t,this.media.muted=t},get:function(){return Boolean(this.media.muted)}},{key:"hasAudio",get:function(){return!this.isHTML5||!!this.isAudio||Boolean(this.media.mozHasAudio)||Boolean(this.media.webkitAudioDecodedByteCount)||Boolean(this.media.audioTracks&&this.media.audioTracks.length)}},{key:"speed",set:function(e){var t=this,n=null;K(e)&&(n=e),K(n)||(n=this.storage.get("speed")),K(n)||(n=this.config.speed.selected);var i=this.minimumSpeed,r=this.maximumSpeed;n=function(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,r=1<arguments.length&&void 0!==t?t:0,o=2<arguments.length&&void 0!==n?n:255;return Math.min(Math.max(i,r),o)}(n,i,r),this.config.speed.selected=n,setTimeout(function(){t.media.playbackRate=n},0)},get:function(){return Number(this.media.playbackRate)}},{key:"minimumSpeed",get:function(){return this.isYouTube?Math.min.apply(Math,l(this.options.speed)):this.isVimeo?.5:.0625}},{key:"maximumSpeed",get:function(){return this.isYouTube?Math.max.apply(Math,l(this.options.speed)):this.isVimeo?2:16}},{key:"quality",set:function(e){var t,n,i=this.config.quality,r=this.options.quality;if(r.length){var o=[!ee(e)&&Number(e),this.storage.get("quality"),i.selected,i.default].find(K),a=!0;if(!r.includes(o)){var s=(n=o,Q(t=r)&&t.length?t.reduce(function(e,t){return Math.abs(t-n)<Math.abs(e-n)?t:e}):null);this.debug.warn("Unsupported quality option: ".concat(o,", using ").concat(s," instead")),o=s,a=!1}i.selected=o,this.media.quality=o,a&&this.storage.set({quality:o})}},get:function(){return this.media.quality}},{key:"loop",set:function(e){var t=O(e)?e:this.config.loop.active;this.config.loop.active=t,this.media.loop=t},get:function(){return Boolean(this.media.loop)}},{key:"source",set:function(e){Et.change.call(this,e)},get:function(){return this.media.currentSrc}},{key:"download",get:function(){var e=this.config.urls.download;return _(e)?e:this.source},set:function(e){_(e)&&(this.config.urls.download=e,Je.setDownloadUrl.call(this))}},{key:"poster",set:function(e){this.isVideo?dt.setPoster.call(this,e,!1).catch(function(){}):this.debug.warn("Poster can only be set for video")},get:function(){return this.isVideo?this.media.getAttribute("poster")||this.media.getAttribute("data-poster"):null}},{key:"ratio",get:function(){if(!this.isVideo)return null;var e=De(Oe.call(this));return Q(e)?e.join(":"):e},set:function(e){this.isVideo?X(e)&&Me(e)?(this.config.ratio=e,Ie.call(this)):this.debug.error("Invalid aspect ratio specified (".concat(e,")")):this.debug.warn("Aspect ratio can only be set for video")}},{key:"autoplay",set:function(e){var t=O(e)?e:this.config.autoplay;this.config.autoplay=t},get:function(){return Boolean(this.config.autoplay)}},{key:"currentTrack",set:function(e){nt.set.call(this,e,!1)},get:function(){var e=this.captions,t=e.toggled,n=e.currentTrack;return t?n:-1}},{key:"language",set:function(e){nt.setLanguage.call(this,e,!1)},get:function(){return(nt.getCurrentTrack.call(this)||{}).language}},{key:"pip",set:function(e){if(Ce.pip){var t=O(e)?e:!this.pip;Y(this.media.webkitSetPresentationMode)&&this.media.webkitSetPresentationMode(t?rt:"inline"),Y(this.media.requestPictureInPicture)&&(!this.pip&&t?this.media.requestPictureInPicture():this.pip&&!t&&document.exitPictureInPicture())}},get:function(){return Ce.pip?ee(this.media.webkitPresentationMode)?this.media===document.pictureInPictureElement:this.media.webkitPresentationMode===rt:null}}],[{key:"supported",value:function(e,t,n){return Ce.check(e,t,n)}},{key:"loadSprite",value:function(e,t){return Ke(e,t)}},{key:"setup",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=null;return X(e)?n=Array.from(document.querySelectorAll(e)):G(e)?n=Array.from(e):Q(e)&&(n=e.filter(J)),ee(n)?null:n.map(function(e){return new Pt(e,t)})}}]),Pt);function Pt(e,t){var n,i=this;if(c(this,Pt),this.timers={},this.ready=!1,this.loading=!1,this.failed=!1,this.touch=Ce.touch,this.media=e,X(this.media)&&(this.media=document.querySelectorAll(this.media)),(window.jQuery&&this.media instanceof jQuery||G(this.media)||Q(this.media))&&(this.media=this.media[0]),this.config=ae({},it,Pt.defaults,t||{},function(){try{return JSON.parse(i.media.getAttribute("data-plyr-config"))}catch(e){return{}}}()),this.elements={container:null,fullscreen:null,captions:null,buttons:{},display:{},progress:{},inputs:{},settings:{popup:null,menu:null,panels:{},buttons:{}}},this.captions={active:null,currentTrack:-1,meta:new WeakMap},this.fullscreen={active:!1},this.options={speed:[],quality:[]},this.debug=new at(this.config.debug),this.debug.log("Config",this.config),this.debug.log("Support",Ce),!U(this.media)&&J(this.media))if(this.media.plyr)this.debug.warn("Target already setup");else if(this.config.enabled)if(Ce.check().api){var r=this.media.cloneNode(!0);r.autoplay=!1,this.elements.original=r;var o=this.media.tagName.toLowerCase(),a=null,s=null;switch(o){case"div":if(a=this.media.querySelector("iframe"),J(a)){if(s=Ze(a.getAttribute("src")),this.provider=(n=s.toString(),/^(https?:\/\/)?(www\.)?(youtube\.com|youtube-nocookie\.com|youtu\.?be)\/.+$/.test(n)?ot.youtube:/^https?:\/\/player.vimeo.com\/video\/\d{0,9}(?=\b|\/)/.test(n)?ot.vimeo:null),this.elements.container=this.media,this.media=a,this.elements.container.className="",s.search.length){var l=["1","true"];l.includes(s.searchParams.get("autoplay"))&&(this.config.autoplay=!0),l.includes(s.searchParams.get("loop"))&&(this.config.loop.active=!0),this.isYouTube?(this.config.playsinline=l.includes(s.searchParams.get("playsinline")),this.config.youtube.hl=s.searchParams.get("hl")):this.config.playsinline=!0}}else this.provider=this.media.getAttribute(this.config.attributes.embed.provider),this.media.removeAttribute(this.config.attributes.embed.provider);if(ee(this.provider)||!Object.keys(ot).includes(this.provider))return void this.debug.error("Setup failed: Invalid provider");this.type="video";break;case"video":case"audio":this.type=o,this.provider=ot.html5,this.media.hasAttribute("crossorigin")&&(this.config.crossorigin=!0),this.media.hasAttribute("autoplay")&&(this.config.autoplay=!0),(this.media.hasAttribute("playsinline")||this.media.hasAttribute("webkit-playsinline"))&&(this.config.playsinline=!0),this.media.hasAttribute("muted")&&(this.config.muted=!0),this.media.hasAttribute("loop")&&(this.config.loop.active=!0);break;default:return void this.debug.error("Setup failed: unsupported type")}this.supported=Ce.check(this.type,this.provider,this.config.playsinline),this.supported.api?(this.eventListeners=[],this.listeners=new ht(this),this.storage=new ze(this),this.media.plyr=this,J(this.elements.container)||(this.elements.container=ce("div",{tabindex:0}),se(this.media,this.elements.container)),dt.migrateStyles.call(this),dt.addStyleHook.call(this),Tt.setup.call(this),this.config.debug&&Ae.call(this,this.elements.container,this.config.events.join(" "),function(e){i.debug.log("event: ".concat(e.type))}),this.fullscreen=new st(this),(this.isHTML5||this.isEmbed&&!this.supported.ui)&&dt.build.call(this),this.listeners.container(),this.listeners.global(),this.config.ads.enabled&&(this.ads=new xt(this)),this.isHTML5&&this.config.autoplay&&setTimeout(function(){return je(i.play())},10),this.lastSeekTime=0,this.config.previewThumbnails.enabled&&(this.previewThumbnails=new Ct(this))):this.debug.error("Setup failed: no support")}else this.debug.error("Setup failed: no support");else this.debug.error("Setup failed: disabled by config");else this.debug.error("Setup failed: no suitable element passed")}return Nt.defaults=JSON.parse(JSON.stringify(it)),Nt}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).MicroModal=t()}(this,function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function C(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e){if(e){if("string"==typeof e)return n(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(t):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,void 0):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var t,c,u,i,d,r=(t=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],e(E.prototype,[{key:"registerTriggers",value:function(){for(var t=this,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];n.filter(Boolean).forEach(function(e){e.addEventListener("click",function(e){return t.showModal(e)})})}},{key:"showModal",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation?this.modal.addEventListener("animationend",function e(){t.modal.removeEventListener("animationend",e,!1),t.setFocusToFirstNode()},!1):this.setFocusToFirstNode(),this.config.onShow(this.modal,this.activeElement,e)}},{key:"closeModal",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var n=this.config.openClass;this.modal.addEventListener("animationend",function e(){t.classList.remove(n),t.removeEventListener("animationend",e,!1)},!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(t);return Array.apply(void 0,C(e))}},{key:"setFocusToFirstNode",value:function(){var t=this;if(!this.config.disableFocus){var e=this.getFocusableNodes();if(0!==e.length){var n=e.filter(function(e){return!e.hasAttribute(t.config.closeTrigger)});0<n.length&&n[0].focus(),0===n.length&&e[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter(function(e){return null!==e.offsetParent}),this.modal.contains(document.activeElement)){var n=t.indexOf(document.activeElement);e.shiftKey&&0===n&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&0<t.length&&n===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}]),c=E,u=null,i=function(e){if(!document.getElementById(e))return console.warn("MicroModal: âSeems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},d=function(e,t){if(e.length<=0&&(console.warn("MicroModal: âPlease specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')),!t)return!0;for(var n in t)i(n);return!0},{init:function(e){var t,n,i,r=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),o=C(document.querySelectorAll("[".concat(r.openTrigger,"]"))),a=(t=o,n=r.openTrigger,i=[],t.forEach(function(e){var t=e.attributes[n].value;void 0===i[t]&&(i[t]=[]),i[t].push(e)}),i);if(!0!==r.debugMode||!1!==d(o,a))for(var s in a){var l=a[s];r.targetModal=s,r.triggers=C(l),u=new c(r)}},show:function(e,t){var n=t||{};n.targetModal=e,!0===n.debugMode&&!1===i(e)||(u&&u.removeEventListeners(),(u=new c(n)).showModal())},close:function(e){e?u.closeModalById(e):u.closeModal()}});function E(e){var t=e.targetModal,n=e.triggers,i=void 0===n?[]:n,r=e.onShow,o=void 0===r?function(){}:r,a=e.onClose,s=void 0===a?function(){}:a,l=e.openTrigger,c=void 0===l?"data-micromodal-trigger":l,u=e.closeTrigger,d=void 0===u?"data-micromodal-close":u,h=e.openClass,f=void 0===h?"is-open":h,p=e.disableScroll,m=void 0!==p&&p,g=e.disableFocus,y=void 0!==g&&g,v=e.awaitCloseAnimation,b=void 0!==v&&v,w=e.awaitOpenAnimation,k=void 0!==w&&w,T=e.debugMode,x=void 0!==T&&T;!function(e){if(!(e instanceof E))throw new TypeError("Cannot call a class as a function")}(this),this.modal=document.getElementById(t),this.config={debugMode:x,disableScroll:m,openTrigger:c,closeTrigger:d,openClass:f,onShow:o,onClose:s,awaitCloseAnimation:b,awaitOpenAnimation:k,disableFocus:y},0<i.length&&this.registerTriggers.apply(this,C(i)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}return window.MicroModal=r});var Sticky=function(){function n(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,n),this.selector=e,this.elements=[],this.version="1.3.0",this.vp=this.getViewportSize(),this.body=document.querySelector("body"),this.options={wrap:t.wrap||!1,wrapWith:t.wrapWith||"<span></span>",marginTop:t.marginTop||0,marginBottom:t.marginBottom||0,stickyFor:t.stickyFor||0,stickyClass:t.stickyClass||null,stickyContainer:t.stickyContainer||"body"},this.updateScrollTopPosition=this.updateScrollTopPosition.bind(this),this.updateScrollTopPosition(),window.addEventListener("load",this.updateScrollTopPosition),window.addEventListener("scroll",this.updateScrollTopPosition),this.run()}return _createClass(n,[{key:"run",value:function(){var t=this,n=setInterval(function(){if("complete"===document.readyState){clearInterval(n);var e=document.querySelectorAll(t.selector);t.forEach(e,function(e){return t.renderElement(e)})}},10)}},{key:"renderElement",value:function(e){var t=this;e.sticky={},e.sticky.active=!1,e.sticky.marginTop=parseInt(e.getAttribute("data-margin-top"))||this.options.marginTop,e.sticky.marginBottom=parseInt(e.getAttribute("data-margin-bottom"))||this.options.marginBottom,e.sticky.stickyFor=parseInt(e.getAttribute("data-sticky-for"))||this.options.stickyFor,e.sticky.stickyClass=e.getAttribute("data-sticky-class")||this.options.stickyClass,e.sticky.wrap=!!e.hasAttribute("data-sticky-wrap")||this.options.wrap,e.sticky.stickyContainer=this.options.stickyContainer,e.sticky.container=this.getStickyContainer(e),e.sticky.container.rect=this.getRectangle(e.sticky.container),e.sticky.rect=this.getRectangle(e),"img"===e.tagName.toLowerCase()&&(e.onload=function(){return e.sticky.rect=t.getRectangle(e)}),e.sticky.wrap&&this.wrapElement(e),this.activate(e)}},{key:"wrapElement",value:function(e){e.insertAdjacentHTML("beforebegin",e.getAttribute("data-sticky-wrapWith")||this.options.wrapWith),e.previousSibling.appendChild(e)}},{key:"activate",value:function(e){e.sticky.rect.top+e.sticky.rect.height<e.sticky.container.rect.top+e.sticky.container.rect.height&&e.sticky.stickyFor<this.vp.width&&!e.sticky.active&&(e.sticky.active=!0),this.elements.indexOf(e)<0&&this.elements.push(e),e.sticky.resizeEvent||(this.initResizeEvents(e),e.sticky.resizeEvent=!0),e.sticky.scrollEvent||(this.initScrollEvents(e),e.sticky.scrollEvent=!0),this.setPosition(e)}},{key:"initResizeEvents",value:function(e){var t=this;e.sticky.resizeListener=function(){return t.onResizeEvents(e)},window.addEventListener("resize",e.sticky.resizeListener)}},{key:"destroyResizeEvents",value:function(e){window.removeEventListener("resize",e.sticky.resizeListener)}},{key:"onResizeEvents",value:function(e){this.vp=this.getViewportSize(),e.sticky.rect=this.getRectangle(e),e.sticky.container.rect=this.getRectangle(e.sticky.container),e.sticky.rect.top+e.sticky.rect.height<e.sticky.container.rect.top+e.sticky.container.rect.height&&e.sticky.stickyFor<this.vp.width&&!e.sticky.active?e.sticky.active=!0:(e.sticky.rect.top+e.sticky.rect.height>=e.sticky.container.rect.top+e.sticky.container.rect.height||e.sticky.stickyFor>=this.vp.width&&e.sticky.active)&&(e.sticky.active=!1),this.setPosition(e)}},{key:"initScrollEvents",value:function(e){var t=this;e.sticky.scrollListener=function(){return t.onScrollEvents(e)},window.addEventListener("scroll",e.sticky.scrollListener)}},{key:"destroyScrollEvents",value:function(e){window.removeEventListener("scroll",e.sticky.scrollListener)}},{key:"onScrollEvents",value:function(e){e.sticky&&e.sticky.active&&this.setPosition(e)}},{key:"setPosition",value:function(e){this.css(e,{position:"",width:"",top:"",left:""}),this.vp.height<e.sticky.rect.height||!e.sticky.active||(e.sticky.rect.width||(e.sticky.rect=this.getRectangle(e)),e.sticky.wrap&&this.css(e.parentNode,{display:"block",width:e.sticky.rect.width+"px",height:e.sticky.rect.height+"px"}),0===e.sticky.rect.top&&e.sticky.container===this.body?(this.css(e,{position:"fixed",top:e.sticky.rect.top+"px",left:e.sticky.rect.left+"px",width:e.sticky.rect.width+"px"}),e.sticky.stickyClass&&e.classList.add(e.sticky.stickyClass)):this.scrollTop>e.sticky.rect.top-e.sticky.marginTop?(this.css(e,{position:"fixed",width:e.sticky.rect.width+"px",left:e.sticky.rect.left+"px"}),this.scrollTop+e.sticky.rect.height+e.sticky.marginTop>e.sticky.container.rect.top+e.sticky.container.offsetHeight-e.sticky.marginBottom?(e.sticky.stickyClass&&e.classList.remove(e.sticky.stickyClass),this.css(e,{top:e.sticky.container.rect.top+e.sticky.container.offsetHeight-(this.scrollTop+e.sticky.rect.height+e.sticky.marginBottom)+"px"})):(e.sticky.stickyClass&&e.classList.add(e.sticky.stickyClass),this.css(e,{top:e.sticky.marginTop+"px"}))):(e.sticky.stickyClass&&e.classList.remove(e.sticky.stickyClass),this.css(e,{position:"",width:"",top:"",left:""}),e.sticky.wrap&&this.css(e.parentNode,{display:"",width:"",height:""})))}},{key:"update",value:function(){var t=this;this.forEach(this.elements,function(e){e.sticky.rect=t.getRectangle(e),e.sticky.container.rect=t.getRectangle(e.sticky.container),t.activate(e),t.setPosition(e)})}},{key:"destroy",value:function(){var t=this;window.removeEventListener("load",this.updateScrollTopPosition),window.removeEventListener("scroll",this.updateScrollTopPosition),this.forEach(this.elements,function(e){t.destroyResizeEvents(e),t.destroyScrollEvents(e),delete e.sticky})}},{key:"getStickyContainer",value:function(e){for(var t=e.parentNode;!t.hasAttribute("data-sticky-container")&&!t.parentNode.querySelector(e.sticky.stickyContainer)&&t!==this.body;)t=t.parentNode;return t}},{key:"getRectangle",value:function(e){this.css(e,{position:"",width:"",top:"",left:""});for(var t=Math.max(e.offsetWidth,e.clientWidth,e.scrollWidth),n=Math.max(e.offsetHeight,e.clientHeight,e.scrollHeight),i=0,r=0;i+=e.offsetTop||0,r+=e.offsetLeft||0,e=e.offsetParent;);return{top:i,left:r,width:t,height:n}}},{key:"getViewportSize",value:function(){return{width:Math.max(document.documentElement.clientWidth,window.innerWidth||0),height:Math.max(document.documentElement.clientHeight,window.innerHeight||0)}}},{key:"updateScrollTopPosition",value:function(){this.scrollTop=(window.pageYOffset||document.scrollTop)-(document.clientTop||0)||0}},{key:"forEach",value:function(e,t){for(var n=0,i=e.length;n<i;n++)t(e[n])}},{key:"css",value:function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n])}}]),n}();!function(e,t){"undefined"!=typeof exports?module.exports=t:"function"==typeof define&&define.amd?define([],function(){return t}):e.Sticky=t}(this,Sticky);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
